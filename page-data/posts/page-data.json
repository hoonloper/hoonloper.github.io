{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"b40ce09b-cf0e-515f-834a-509512e42b7a","excerpt":"안녕하세요. 어느덧 개발 공부를 시작한지 1년이 채워졌고 개발자로 총 5개월쯤 업무를 봤네요. 이제부터 들려드릴 이야기는 흔하고 특색은 떨어지지만 담백한 개발자의 1년 이야기입니다. ~ 2022년 12월 21일 🫢 어느새?! 2021년 12월 6일 동아리 활동을 시작으로 제 개발 커리어가 시작됐습니다. 처음 막 공부를 시작할 때는 정말 개발자로 취직할 수 있을지 걱정이 태산같았어요. 이런 걱정들을 잊으려고 자신감을 불어 넣으며 힘차게 달렸더니 어느순간 개발자로 현업에서 일을 하고 있군요. 물론 지금까지 힘차게 달렸던 것만은 아닙니다. 흔히 말하는 개발 권태기를 저도 한번 겪었었고 더 높은 곳을 향해 달려가고 싶은 욕망은 크지만 한참 모자란 것 같은 기분에 우울했던 적도 있지요. 이런 다양한 스토리들을 간략하게 풀어볼까 해요! 🏃🏻 개발 시작! 위에서 말했듯 작년 12월에 공부를 시작했습니다. 모던 애자일이라는 동아리에 가입해 개발에 ‘개’자도 모르는 상태로 프로젝트 리더 직책을 맡아…","fields":{"slug":"/retrospect/2022-마지막-회고/"},"frontmatter":{"categories":"회고","title":"[회고] 2022년을 돌아보며","date":"December 21, 2022"}},"next":{"fields":{"slug":"/books/core-javascript-2/"}},"previous":null},{"node":{"id":"a17c867d-9747-5c46-a9fd-e5a167480863","excerpt":"실행 컨텍스트 실행 컨텍스트?\n실행할 코드에 제공할 환경 정보들을 모아놓은 객체 스택(stack), 큐(queue)의 개념 스택 - FILO 구조, 바구니와 비슷한 데이터 구조\n큐 - FIFO 구조, 파이프와 비슷한 데이터 구조 동일한 환경에 있는 코드들을 실행할 때 필요한 환경 정보들을 모아 컨텍스트를 구성하고, 이를 콜 스택에 쌓아올렸다가 가장 위에 쌓여있는 컨텍스트와 관련 있는 코드들을 실행하는 식으로 전체 코드의 환경과 순서를 보장합니다. 여기서 동일한 환경 즉 하나의 실행 컨텍스트를 구성할 수 있는 방법으로 전역공간, eval() 함수, 함수 등이 있습니다. 자동으로 생성되는 전역공간과 악마로 취급받는 eval을 제외하면 우리가 흔히 실행 컨텍스트를 구성하는 방법은 함수를 실행하는 것뿐입니다. Node.js 실행 환경에 대해서는 새롭게 포스트를 정리할게요 😉 실행 컨텍스트 객체 데이터 VariableEnvironment: 현재 컨텍스트 내의 식별자들에 대한 정보 + 외부 …","fields":{"slug":"/books/core-javascript-2/"},"frontmatter":{"categories":"BOOKS","title":"[Core-Javascript] 두번째 팁 모음","date":"November 19, 2022"}},"next":{"fields":{"slug":"/algorithm/coding-test-1/"}},"previous":{"fields":{"slug":"/retrospect/2022-마지막-회고/"}}},{"node":{"id":"49236876-79ac-5c44-9072-375651d526d0","excerpt":"프로그래머스 2단계 문제인 타겟 넘버 풀이입니다! Description\nn개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다. 사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요. 제한사항 주어지는 숫자의 개수는 2개 이상 20개 이하입니다. 각 숫자는 1 이상 50 이하인 자연수입니다. 타겟 넘버는 1 이상 1000 이하인 자연수입니다. numbers | target | return\n[1, 1, 1, 1, 1] | 3 | 5\n[4, 1, 2, 1] | 4 | 2 풀이 먼저 DFS 함수부터 뜯어보겠습니다. 조건문에서 numbers 배열의 모든 요소를 연산해야 하기 …","fields":{"slug":"/algorithm/coding-test-1/"},"frontmatter":{"categories":"코딩테스트","title":"[프로그래머스] 타겟 넘버 - DFS","date":"November 12, 2022"}},"next":{"fields":{"slug":"/books/core-javascript-1/"}},"previous":{"fields":{"slug":"/books/core-javascript-2/"}}},{"node":{"id":"fe776cf8-40ec-5493-8447-d0b3c483b0cc","excerpt":"코어 자바스크립트 책을 정독하면서 얻은 팁들을 소소하게 정리하는 게시글입니다. 데이터 타입의 종류 자바스크립트의 데이터 타입에는 크게 두 가지가 있는데 기본형과 참조형입니다. 기본형 number(숫자) string(문자열) boolean(불리언) null undefined symbol(심볼) 참조형 object(객체) Map WeakMap Set WeakSet array(배열) function(함수) date(날짜) regexp(정규표현식) 기본형과 참조형의 차이점은 무엇일까요? 기본형은 값이 담긴 주솟값을 바로 복제하는 반면 참조형은 값이 담긴 주솟값들로 이루어진 묶음을 가리키는 주솟값을 복제한다는 점입니다. 그리고 기본형은 불변성을 띕니다.\n한번 만들어진 값은 가비지 컬렉팅을 당하지 않는 한 영원히 변하지 않습니다. 메모리와 데이터 자바스크립트는 메모리 용량이 과거보다 월등히 커진 시점에서 등장했기에 다른 저급 언어들과 상대적으로 메모리 관리에 대한 압박에서 자유로워졌습니다. …","fields":{"slug":"/books/core-javascript-1/"},"frontmatter":{"categories":"BOOKS","title":"[Core-Javascript] 첫번째 팁 모음","date":"November 05, 2022"}},"next":{"fields":{"slug":"/cs/mongodb/"}},"previous":{"fields":{"slug":"/algorithm/coding-test-1/"}}},{"node":{"id":"f1cfcb7c-db6a-5e27-aba8-1d63408568ff","excerpt":"사내에서 몽고DB를 다루기 때문에 좀 더 깊게 공부하려고 정리한 글입니다. NoSQL이란? NoSQL은 Not Only SQL, SQL 뿐만 아니다라는 의미를 지니고 있습니다. 즉, SQL을 사용하는 관계형 데이터베이스가 아닌 데이터베이스를 의미합니다. 대표적인 관계형 데이터베이스로는 MySQL, Oracle, PostgreSQL이 있고, NoSQL 진영에는 이 포스트에서 다루는 MongoDB와 Redis, HBase 등이 있습니다. 그래서 NoSQL은 왜 탄생하게 됐을까요? RDBMS만으로 충분하지 않을까?라는 의문이 있습니다. 하지만 RDBMS은 은총알이 아니었고 분명한 한계점이 있죠. NoSQL은 다음과 같이 RDBMS에선 하기 힘든 일을 쉽게 지원합니다. 수평 확장 가능한 분산 시스템 Schema-less 완화된 ACID RDBMS vs NoSQL 인터넷에 RDBMS와 NoSQL의 비교라고 검색하면 다음과 같은 표를 많이 볼 수 있다. RDBMS NoSQL 적합한 사용례 데…","fields":{"slug":"/cs/mongodb/"},"frontmatter":{"categories":"CS","title":"[CS] MongoDB","date":"November 02, 2022"}},"next":{"fields":{"slug":"/skills/promise-all/"}},"previous":{"fields":{"slug":"/books/core-javascript-1/"}}},{"node":{"id":"3946968e-89f6-5c12-b296-21fa5b5734bf","excerpt":"안녕하세요. 이번 포스트는 Promise.all을 활용해 테스트 코드의 동작 시간을 단축한 경험을 풀어보려 해요. 동기와 비동기가 무엇인지에 대해서는 인터넷에 너무나 많은 양질의 자료들이 많으니 여기서는 설명을 스킵할게요 :) 진득하게 테스트 코드를 작성하고 있던 저는 한가지 고민에 빠졌어요. 테스트 코드가 늘어날수록 테스트 시간이 늘어나 견디기 힘들만큼 길어져 더이상은 안되겠다 싶었죠. 테스트 DB에 접근해 데이터를 가져오지만 데이터 양이 많아 한번 get 요청에 평균 1초가 걸렸어요. DB에서 뽑아오는 API를 수정하지 않는 이상 속도 개선에 대한 부분은 감안하고 진행해야 했어요 😭 그래서 작성하고 있던 제 테스트 코드를 뜯어 고치기로 마음을 다짐했어요! 다른 테스트 코드들은 상관이 없으니 실질적으로 문제를 일으키는 녀석들은 필터링 관련 테스트였어요. 필터링 관련 항목이 약 20개며, 정렬 관련 항목이 약 15개 정도 되니 총 35번의 API 호출이 연속적으로 이뤄지고 평균 1…","fields":{"slug":"/skills/promise-all/"},"frontmatter":{"categories":"SKILL","title":"[Skill] Promise.all을 활용해 동작 시간 단축","date":"October 26, 2022"}},"next":{"fields":{"slug":"/event/nestjs2/"}},"previous":{"fields":{"slug":"/cs/mongodb/"}}},{"node":{"id":"f602a153-3a23-5e5d-8548-b8925fc146cb","excerpt":"행사 관련해서 제가 직접 촬영한 사진이 없네요 ㅠㅠ 참고 바라며 마지막에 행사 상품 사진이라도 첨부할게요! NestJS Korea Meetup 영상 다시보기🔥 NestJS 코리아 밋업에 참여하다. 오늘은 강남에 있는 팀 스파르타에서 진행된 NestJS 밋업에 참여했습니다! 개발자로서 개발 관련한 행사에 참여하는 것은 이번이 처음이라 매우 떨렸네요 😅 지난번에 인프콘 행사에 신청했지만 아쉽게 당첨되지는 못해서 참여 못한 기억이 스물스물 올라옵니다 😂 행사 진행 일시와 장소는 아래와 같아요! 목차 19:00 ~ 19:10 오프닝 인사 19:10 ~ 19:40 남정호 - Nestia + TypeScript-JSON Automatic SDK generator with 초고속 JSON 상하차(시대가 어느 때인데 아직도 swagger 하세요?) 19:40 ~ 20:10 조헌일 - NestJS에서 서버리스 트랜스코딩 파이프라인 만들기 NestJS에서 빠르고 쉽게 트랜스코딩 파이프라인을 구축하는…","fields":{"slug":"/event/nestjs2/"},"frontmatter":{"categories":"EVENT","title":"[EVENT] NestJS Assemble! - 2번째 Nest 코리아 밋업 후기","date":"October 20, 2022"}},"next":{"fields":{"slug":"/skills/mongodb-aggregation/"}},"previous":{"fields":{"slug":"/skills/promise-all/"}}},{"node":{"id":"e103338a-256a-5c3d-8b1b-74048c7170cb","excerpt":"Aggregation??? 몽고DB의 Aggregation은 데이터 처리 파이프라인 개념을 모델로 합니다. 어그리게이션은 다중 스테이지 파이프라인을 사용할 수 있는데 원하는 데이터 형식 혹은 값들을 필터해서 출력할 수 있습니다. 어그리게이션 작업은 데이터를 처리하여 계산된 결과를 반환합니다. 어그리게이션은 여러 도큐먼트의 값을 그룹화하고, 데이터에 다양한 작업을 수행한 후 단일 결과를 반환할 수 있습니다. MongoDB는 세 가지 어그리게이션을 제공합니다. Aggregation Pipeline Single Purpose Aggregation Operations Map-reduce 위 코드와 같이 첫번째 스테이지는 이고 두번째 스테이지는 입니다. 매치는 조건과 같은 역할을 수행하며 그룹은 그룹화를 통해 유니크한 값들의 합을 계산하거나 원하는 동작을 수애하게 할 수 있습니다. 이 외에도 다양한 스테이지들이 있으며, 스테이지의 순서는 아래와 같습니다. pipeline 순서 collect…","fields":{"slug":"/skills/mongodb-aggregation/"},"frontmatter":{"categories":"SKILL","title":"[Skill] MongoDB Aggregation이란?","date":"October 18, 2022"}},"next":{"fields":{"slug":"/cs/js-vs-ts/"}},"previous":{"fields":{"slug":"/event/nestjs2/"}}},{"node":{"id":"e8154d56-dd68-5fb5-84bb-370a3592768a","excerpt":"안녕하세요! 이번 포스트는 JavaScript와 TypeScript 차이에 대해 작성하려 합니다! JavaScript & TypeScript JavaScript 자바스크립트는 ‘웹페이지에 생동감을 불어넣기 위해’ 만들어진 동적인 프로그래밍 언어입니다. 동적인 언어에 맞게 암묵적 형변환 현상이 있어 보다 개발을 쉽게 할 수 있는 언어입니다. TypeScript 타입스크립트는 자바스크립트 언어에 타입을 부여한 언어입니다. 동적인 자바스크립트를 정적으로 바꿔줘 예상치 못한 에러를 방지할 수 있습니다. 런타임에서 발생할 에러를 컴파일 단계에서 미리 잡아줘 에러 예방이 가능합니다. 타입스크립트는 브라우저에서 실행하려면 자바스크립트로 바꿔주는 컴파일 과정을 거칩니다. TypeScript를 왜 사용하는가?! 제가 지금까지 개발하면서 느꼈던 점 위주로 작성하겠습니다. 장점 데이터 유효성 검사로 타입 에러를 최소화 할 수 있다. 내가 아닌 다른 개발자가 코드를 봤을 때 타입이 명시적으로 작성되어 …","fields":{"slug":"/cs/js-vs-ts/"},"frontmatter":{"categories":"CS","title":"[CS] JavaScript & TypeScript","date":"September 19, 2022"}},"next":{"fields":{"slug":"/skills/prisma2/"}},"previous":{"fields":{"slug":"/skills/mongodb-aggregation/"}}},{"node":{"id":"9b5ac0ef-fa15-5cd1-91cb-97cadfd4b6ab","excerpt":"111 프리즈마를 선택해야 하는 이유 Prisma의 주요 목표는 데이터베이스 작업 시 애플리케이션 개발자의 생산성을 높이는 것입니다. 다음은 Prisma의 목표를 이루기 위한 몇 가지 예입니다. 관계형 데이터를 매핑하는 대신 개체에서 생각하기 복잡한 모델 객체를 피하기 위해 클래스가 아닌 쿼리 데이터베이스 및 애플리케이션 모델을 위한 단일 정보 소스 일반적인 함정과 반패턴을 방지하는 제약 쉽게 만드는 추상화 컴파일 시 유효성을 검사할 수 있는 유형 안전 데이터베이스 쿼리 개발자가 앱의 중요한 부분에 집중할 수 있도록 상용구 감소 문서를 찾을 필요 없이 코드 편집기에서 자동 완성 SQL, ORM 및 기타 데이터베이스 도구의 문제 현재 Node.js 및 TypeScript 에코시스템에 존재하는 데이터베이스 도구의 주요 문제는 생산성과 제어 간의 주요 절충점이 필요하다는 것 입니다. 원시 SQL: 전체 제어, 낮은 생산성 원시 SQL(예: 기본 pg또는 mysqlNode.js 데이터베이…","fields":{"slug":"/skills/prisma2/"},"frontmatter":{"categories":"SKILL","title":"[Skill] Prisma Proj-2","date":"September 18, 2022"}},"next":{"fields":{"slug":"/skills/prisma/"}},"previous":{"fields":{"slug":"/cs/js-vs-ts/"}}},{"node":{"id":"9c3f3a71-ad7c-5f99-8d95-14b528e0b078","excerpt":"111 소규모 프로젝트의 Back-End 개발을 시작했습니다. Nest X TypeORM 조합만 사용해왔던 저는 새로운 기술을 배워보고 싶어 평소 흥미롭게 바라보던 Prisma를 적용해보기로 결정합니다. 공식 문서에서 설명하는 Prisma는 이렇습니다. 프리즈마란? Prisma는 오픈 소스 차세대 ORM입니다. 다음 부분으로 구성됩니다. Prisma Client : Node.js 및 TypeScript를 위한 자동 생성 및 유형 안전 쿼리 빌더 Prisma Migrate : 마이그레이션 시스템 Prisma Studio : 데이터베이스의 데이터를 보고 편집하는 GUI Prisma Client는 모든 Node.js(지원 버전) 또는 TypeScript 백엔드 애플리케이션(서버리스 애플리케이션 및 마이크로서비스 포함)에서 사용할 수 있습니다. 프리즈마의 작동 방식 RDBMS NoSQL 이 스키마에서는 세 가지를 구성합니다. Data source : 데이터베이스 연결을 지정합니다(환경 변…","fields":{"slug":"/skills/prisma/"},"frontmatter":{"categories":"SKILL","title":"[Skill] Prisma Proj-1","date":"September 18, 2022"}},"next":{"fields":{"slug":"/cs/transaction/"}},"previous":{"fields":{"slug":"/skills/prisma2/"}}},{"node":{"id":"41c752e0-b625-5b1f-8c43-5394bea5e4ae","excerpt":"안녕하세요! 이번 포스트는 트랜잭션에 대해 알아보고 Dead lock이 무엇인지, 어떻게 하면 피할 수 있는지를 알아보겠습니다! 트랜잭션이란? 트랜잭션(Transaction)은 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들을 의미합니다. 트랜잭션 사용 목적 데이터 부정합 방지 데이터베이스 서버에 여러 개의 클라이언트가 동시에 액세스하는 경우 응용프로그램이 갱신을 처리하는 과정에서 중단될 수 있는 경우 데이터베이스의 완전성(integrity) 유지 확신 데이터베이스가 수행한 일부 쿼리가 남으면 안 됨 ex) 송금시 한 계좌에서 인출 → 다른 계좌에서 입금 확인 트랜잭션은 서로 간섭하면 안 됨 ex) 쿼리 하나 실패 → 데이터베이스 시스템이 전체 트랜잭션 또는 실패한 쿼리 롤백 거래의 안정성 확보\n테이블에서 데이터를 읽어옴 → 다른 테이블에 데이터 입력/갱신/삭제 도중 오류 발생 → 모든 작업 원상태로 …","fields":{"slug":"/cs/transaction/"},"frontmatter":{"categories":"CS","title":"[CS] 트랜잭션(transaction)","date":"September 17, 2022"}},"next":{"fields":{"slug":"/algorithm/bruteforce/"}},"previous":{"fields":{"slug":"/skills/prisma/"}}},{"node":{"id":"bb3116a1-79dc-59bc-af4c-8b1c91990ddd","excerpt":"안녕하세요. 이번 포스트는 완전 탐색에 대해 알아보겠습니다 :) 완전탐색(brute force)이란? 우선 영어 단어 해석부터 살펴보겠습니다. brute force는 무식한? 힘으로 해석이 되는데요. 즉, 가능한 모든 경우의 수를 모두 탐색하면서 요구조건에 충족되는 결과만을 가져오기에 붙은 이름이지 않을까 생각이 들어요! 완전 탐색 알고리즘이 주는 강점은 예외 없이 정답만을 출력한다는 것입니다. 일반적 방법으로 문제를 해결하기 위해서는 모든 자료를 탐색해야 하기 때문에 특정한 구조를 전체적으로 탐색할 수 있는 방법을 필요로 합니다. 알고리즘 설계의 가장 기본적인 접근 방법은 해가 존재할 것으로 예상되는 모든 영역을 전체 탐색하는 방법입니다. 선형 구조를 전체적으로 탐색하는 순차 탐색, 비선형 구조를 전체적으로 탐색하는 깊이 우선 탐색(DFS, Depth First Search)과 너비 우선 탐색(BFS, breadth first search)이 가장 기본적인 도구입니다. 100% …","fields":{"slug":"/algorithm/bruteforce/"},"frontmatter":{"categories":"자료구조","title":"[자료구조] 완전 탐색 - brute force","date":"September 01, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/teck12RefreshToken/"}},"previous":{"fields":{"slug":"/cs/transaction/"}}},{"node":{"id":"d6b47a14-5574-56f1-8c1d-7a17c1f7cb17","excerpt":"인증 관련해서 아주 중요한 Refresh Token에 대해 알아보도록 하겠습니다. 이 게시글을 방문한 분들은 JWT(Json Web Token)에 대한 지식이 있다고 생각하고 가볍게 짚고 넘어가겠습니다. JWT란 ? Untitled JWT는 Json Web Token의 약어로, JSON 형식의 데이터를 암호화해 저장하는 토큰이며 다음과 같이 세 부분으로 구성됩니다. 헤더(header): 토큰 종류와 해시 알고리즘 정보 페이로드(payload): 토큰의 내용물이 인코딩된 부분 시그니처(signature): 일련의 문자열, 시그니처를 통해 토큰이 변조되었는지 여부를 확인 장점 간편합니다. 세션/쿠키는 별도의 저장소의 관리가 필요합니다. 그러나 JWT는 발급한 후 검증만 하면 되기 때문에 추가 저장소가 필요 없습니다. 이는 Stateless 한 서버를 만드는 입장에서는 큰 강점입니다. 여기서 Stateless는 어떠한 별도의 저장소도 사용하지 않는, 즉 상태를 저장하지 않는 것을 의미합…","fields":{"slug":"/modern-agile-team/teck12RefreshToken/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Refresh Token","date":"July 15, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech11DbIndex/"}},"previous":{"fields":{"slug":"/algorithm/bruteforce/"}}},{"node":{"id":"d513370c-8dc1-5af6-a2b5-d396f6ad95d6","excerpt":"Index란? 인덱스란 추가적인 쓰기 작업과 저장 공간을 활용하여 데이터베이스 테이블의 검색 속도를 향상시키기 위한 자료구조입니다. 만약 우리가 책에서 원하는 내용을 찾는다고 하면, 책의 모든 페이지를 찾아 보는것은 오랜 시간이 걸립니다. 그렇기 때문에 책의 저자들은 책의 맨 앞 또는 맨 뒤에 색인을 추가하는데, 데이터베이스의 index는 책의 색인과 같은 역할을 합니다. 데이터베이스에서도 테이블의 모든 데이터를 검색하면 시간이 오래 걸리기 때문에 데이터와 데이터의 위치를 포함한 자료구조를 생성하여 빠르게 조회할 수 있도록 해줍니다. 111 인덱스(index)의 관리 DBMS는 index를 항상 최신의 정렬된 상태로 유지해야 원하는 값을 빠르게 탐색할 수 있습니다. 그렇기 때문에 인덱스가 적용된 컬럼에 INSERT, UPDATE, DELETE가 수행된다면 각각 다음과 같은 연산을 추가적으로 해주어야 하며 그에 따른 오버헤드가 발생합니다. 💡 INSERT: 새로운 데이터에 대한 인덱…","fields":{"slug":"/modern-agile-team/tech11DbIndex/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Database Index","date":"June 10, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech10Jenkins/"}},"previous":{"fields":{"slug":"/modern-agile-team/teck12RefreshToken/"}}},{"node":{"id":"9e718ed5-d497-5392-9493-7d4f91ec8c49","excerpt":"111 젠킨스란? 소프트웨어 개발 시 지속적으로 통합 서비스를 제공하는 툴, 즉 CI(Continuous Integration) 툴 이라고 표현합니다. 다수의 개발자들이 하나의 프로그램을 개발할 때 버전 충돌을 방지하기 위해 각자 작업한 내용을 공유영역에 있는 저장소에 빈번히 업로드함으로써 지속적 통합이 가능하도록 해주는 유용한 툴입니다. 💡 모든 언어의 조합과 소스 코드 레포지토리에 대한 **지속적인 통합(Continuous integration, CI)**과 지속적 배포(continuous delivery, CD) 환경을 구축하기 위한 도구이다다. 빌드, 테스트, 배포 프로세스를 자동화하여 소프트웨어 품질과 개발 생산성을 높일 수 있다. 웹사이트 jenkins-ci.org 발표일 2011년 2월 2일 프로그래밍 언어 Java 최근 버전 2.23.3 운영체제 크로스 플랫폼 종류 지속적 통합 라이선스 MIT 젠킨스와 같은 CI툴이 등장하기 전에는 일정시간마다 빌드를 실행하는 방식이…","fields":{"slug":"/modern-agile-team/tech10Jenkins/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 젠킨스(Jenkins)","date":"May 20, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech9TestCode/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech11DbIndex/"}}},{"node":{"id":"21e0ccb4-e407-5ef9-9ede-6271cecf8b2a","excerpt":"이번 포스트는 테스트 코드에 대해 알아보겠습니다. 테스트 코드란? 테스트코드란 내가 작성한 메서드 또는 기능이 재대로 동작하는지 테스트 하는 코드를 뜻합니다. 실제로 개발 방법중 TDD라고 테스트 코드를 먼저 작성한 후 기능을 구현하는 방법도 있습니다. 💡 실패하는 테스트코드 작성 -> 테스트가 성공하는 프로덕션코드 작성 -> 테스트가 성공하면 프로덕션 코드를 리팩토링 테스트 코드를 작성하는 이유 개발 초기 단계에 문제를 발견하게 도와줍니다. 개발자가 나중에 코드를 리팩토링하거나 라이브러리 업그레이드 등에서 기존 기능이 올바르게 작동하는지를 확인할 수 있습니다. 기능에 대한 불확실성을 감소시킬 수 있습니다. 시스템에 대한 실제 문서를 제공합니다.(단위 테스트 자체가 문서로 사용 가능합니다.) 클린한 코드를 작성할 수 있습니다. 개발 시간을 단축할 수 있습니다. 테스트 코드를 사용하지 않는 개발 순서 프로덕션 코드를 작성합니다. 서버를 실행합니다. postman과 같은 api 테스트…","fields":{"slug":"/modern-agile-team/tech9TestCode/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 테스트 코드","date":"May 06, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech8ClassGram/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech10Jenkins/"}}},{"node":{"id":"06309197-44c7-541a-9ebe-61375903c084","excerpt":"이번 포스트는 소프트웨어 개발 프로세스 단계중 계획 및 요구분석, 설계 부분에 해당하는 클래스 다이어그램에 대해 다뤄보겠습니다. 클래스 다이어그램을 알기 이전에 소프트웨어 개발 생명주기(SDLC: Software Development Life Cycle)을 먼저 간단히 알아보고 UML을 살펴본뒤 클래스 다이어그램에 대해 설명하겠습니다! 소프트웨어 개발 생명주기란? 💡 계획 → 분석 → 설계 → 구현 → 테스트 → 유지보수 소프트웨어 개발 프로세스는 6단계(경우에 따라 7단계)입니다. 알아봐야 할 계획 및 요구분석에 대해 살짝 알아보자면 계획 단계 개발 비용 산정 일정 계획 위험 관리 요구분석 단계 기존 시스템의 문제 파악 - 새로운 요구사항 도출 및 다이어그램 작성 개발 방법론에 따른 표현 도구 - 구조적 방법론, 정보공학 방법론, 객체지향 방법론(UML의 유스케이스 다이어그램 등) 최종 산출물 - 요구 분석 명세서 설계 단계 분할과 정복, 추상화, 단계적 분해, 모듈화, 정보 은…","fields":{"slug":"/modern-agile-team/tech8ClassGram/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 클래스 다이어그램","date":"April 08, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech7TryCatch/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech9TestCode/"}}},{"node":{"id":"9e882ca6-a1e9-588d-83df-1fea8c0c81e2","excerpt":"Javascript 문법중 하나인 try - catch에 대해서 알아보겠습니다 😉 try - catch는 에러 핸들링이 필요할 때 주로 사용합니다. 여기서 의문이 들 수 있겠죠! ‘왜 에러 핸들링을 해야 할까??’ 단순하게 생각해보면 프로그램 실행시 에러가 발생하면 해당 프로그램은 종료되어 재실행을 하기 전까지 동작하지 않습니다. 이렇게 되면 프로그램을 사용하는 사용자 입장과 개발자 입장에서 곤란한 상황에 놓일 수 있습니다. 이때 try - catch를 사용하게 되면 프로그램이 종료되지 않고 해당 에러를 잡아 사용자 또는 개발자에게 해당 에러를 알려줄 수 있습니다. 즉, 예상 가능한 에러들과 예상치 못한 에러들을 개발자가 의도하여 보다 완성도 있는 프로그램을 만들어 낼 수 있습니다! try - catch 위 코드는 Javascript 내에서 사용 가능한 try - catch - finally 문법입니다. 111 위 사진은 try - catch 알고리즘을 표현한 사진입니다. 에러가 …","fields":{"slug":"/modern-agile-team/tech7TryCatch/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] try - catch","date":"March 25, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech6middleware/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech8ClassGram/"}}},{"node":{"id":"374265c2-f7bd-50b7-8ffe-b5ac85fb7367","excerpt":"꼭 알고 있어야 하는 것들중 하나인 미들웨어에 대해 알아보겠습니다 🤩 미들웨어 자체에 품고 있는 뜻이 너무나 방대하다 보니 웹 브라우저 기준 미들웨어에 대해 풀어보겠습니다 ! 우선적으로 미들웨어의 정의입니다. 미들웨어는 양 쪽을 연결하여 데이터를 주고 받을 수 있도록 중간에서 매개 역할을 하는 소프트웨어, 네트워크를 통해서 연결된 여러 개의 컴퓨터에 있는 많은 프로세스들에게 어떤 서비스를 사용할 수 있도록 연결해 주는 소프트웨어를 말한다. 3계층 클라이언트/서버 구조에서 미들웨어가 존재한다. 웹 브라우저에서 데이터베이스로부터 데이터를 저장하거나 읽어올 수 있게 중간에 미들웨어가 존재하게 된다. 글 내용에서 알 수 있다 싶이 핵심만 간단 요약하면 ‘양 쪽을 연결하여 중간에서 매개 역할을 함 즉, 웹 브라우저에서 데이터 베이스(DB)로부터 데이터를 저장하거나 읽어올 수 있다.’가 되겠네요. 넓은 범위로는 매개체 간 연결해주는 레이어로써 매개체는 클라이언트(사용자) - 서버, 서버 - …","fields":{"slug":"/modern-agile-team/tech6middleware/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Middleware","date":"March 11, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech5Mysql/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech7TryCatch/"}}},{"node":{"id":"ec90152f-afc8-5098-8cbf-34128318974c","excerpt":"이번 포스팅은 Back-End 개발자라면 꼭 알아야 하는 DBMS 중 하나인 MySQL에 대해 아주 간략하게 알아보겠습니다. WHY? 우리는 왜 MySQL과 같은 DB를 배워야 할까요? 정답은 간단합니다. 이 세상에 존재하는 모든 정보와 파일 및 자료들을 관리해야 하기 때문입니다. 예를들어 모든 정보와 자료를 종이 문서로 보관한다면 어떤 일이 발생할까요? 아마 지구 전체가 종이로 덮일만큼 엄청나게 많은 종이 문서들이 생겨나겠죠. 즉, 모든 데이터 정보 및 자료들의 편리한 유지보수와 접근성을 위해 개발된 게 바로 데이터베이스(DB)의 개념이고 이 DB를 잘 다룰 수 있도록 개발된 데이터베이스 관리 시스템(DBMS) 중 하나인 MySQL이 있습니다! 이제 MySQL이 뭔지, 어떻게 사용해야 하는지 알아봅시다! MySQL이란? MySQL은 현재 세계에서 가장 많이 사용되는 DB 1위, 2위를 다투고 있는 1995년에 발표된 오픈 소스 관계형 데이터 베이스 관리 시스템 입니다. 💡 오픈소…","fields":{"slug":"/modern-agile-team/tech5Mysql/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] MySQL","date":"February 24, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech4NginX/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech6middleware/"}}},{"node":{"id":"d2f8082e-998a-511d-bb06-fc419d76e0a9","excerpt":"안녕하세요 👋🏻 오늘은 Back-End를 공부한다면 꼭 알아야 하는 Web Server, NginX에 대해 소개합니다. Web Server와 WAS 개념이 필요하다면 이 포스트를 확인해 주시기 바랍니다 :D WHY? 우리는 왜 NginX를 배워야 할까요? 우리의 일상 속에 녹아드는 IT 기기는 셀 수 없을 정도로 증가하고 있습니다. 그만큼 이용자가 꾸준히 증가하고 있다는 뜻이기도 하지요. 이렇듯 꾸준히 증가하는 이용자들이 하나의 서버로만 집중된다면 어떤 일이 벌어질까요? 서버는 이용자들의 접속량을 못버티고 다운될 것입니다. 그래서, NginX를 통해 이용자들의 접속을 분배하여 서버 과부하를 방지해주고 보안 접속 측면에서 강화할 수 있습니다. 간단요약 : 보안 강화, 서버 과부하 방지(로드밸런싱) NginX란? NginX를 개발한 사람은 러시아의 IgorSysoev라는 개발자입니다. NginX는 동시 접속 처리에 특화되었으며, Apache보다 동작이 단순하고, 전달자 역할만 하는 웹 …","fields":{"slug":"/modern-agile-team/tech4NginX/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] NginX","date":"February 10, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech3WasWs/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech5Mysql/"}}},{"node":{"id":"16db8a54-5f0b-56e4-a812-1fa2cb72e8cd","excerpt":"Static Pages Web Server는 파일 경로 이름을 받아 경로와 일치하는 file contents를 반환한다. 항상 동일한 페이지를 반환한다. 예시 : Image, HTML, CSS, JavaScript 파일과 같이 컴퓨터에 저장되어 있는 파일들 Dynamic Pages 인자의 내용에 맞게 동적인 contents를 반환한다. 즉, 웹 서버에 의해서 실행되는 프로그램을 통해서 만들어진 결과물입니다. Web Server와 WAS의 차이  Web Server 개념 소프트웨어와 하드웨어로 구분됩니다. 하드웨어 : Web 서버가 설치되어 있는 컴퓨터 소프트웨어 : 웹 브라우저 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠(.html, .jpeg, .css 등)를 제공 기능 HTTP 프로토콜을 기반으로 하여 클라이언트(웹 브라우저 또는 웹 크롤러)의 요청을 서비스 하는 기능을 담당합니다. 요청에 따라 아래의 두 가지 기능 중 적절하게 선택해 수행합니다. 기능 1WAS를 거치지…","fields":{"slug":"/modern-agile-team/tech3WasWs/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Web Server VS WAS","date":"January 20, 2022"}},"next":{"fields":{"slug":"/cs/mysql/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech4NginX/"}}},{"node":{"id":"16154821-fa7c-5e46-9bdf-244fab27537e","excerpt":"⭐️ SELECT 데이터를 조회할 때 사용하는 명령어입니다. *(asterisk)는 테이블의 모든 컬럼을 뜻합니다. 원하는 데이터 가져오기[WHERE, ORDER BY, LIMIT, AS] SELECT 명령어 전부 활용해보기 자료 및 출처 : 얄코[https://www.yalco.kr/] 사칙연산 연산자 의미 +, -, *, / (순서대로) 더하기, 빼기, 곱하기, 나누기 %, MOD 나머지 참/거짓 관련 연산자 연산자 의미 IS 양쪽 모두 TRUE 또는 FALSE IS NOT 한쪽은 TRUE, 한쪽은 FALSE 연산자 의미 AND, && 양쪽 모두 TRUE일 때만 TRUE OR, || 한쪽이 TRUE면 TRUE 연산자 의미 = 양쪽 값이 같음 !=, <> 양쪽 값이 다름 >, < (왼, 오) 값이 더 큼 >=, <= (왼, 오) 값이 같거나 더 큼 연산자 의미 BETWEEN {MIN} AND {MAX} 두 값 사이에 있음 NOT BETWEEN {MIN} AND {MAX} 두 값 사…","fields":{"slug":"/cs/mysql/"},"frontmatter":{"categories":"CS","title":"[CS] MySQL - 기초 SQL문","date":"January 12, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech2BigO/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech3WasWs/"}}},{"node":{"id":"c893beaf-0ff8-5764-ad57-7d2b97fc67ad","excerpt":"-> 간단하게 설명하면 알고리즘의 효율성을 나타내는 지표 혹은 언어입니다. Big-O를 확실히 이해하고 있어야 알고리즘을 구현할 때 큰 고비를 해결할 수 있습니다. 또한, Big-O에 대한 개념을 몰라 난처한 상황에 놓이거나 본인 코드의 개선점을 절대 찾지 못할 수도 있으니 꼭 이해하고 숙지했으면 합니다. 빅-오(Big-O)는 무엇일까? -> 간단하게 설명하면 알고리즘의 효율성을 나타내는 지표 혹은 언어입니다. Big-O를 확실히 이해하고 있어야 알고리즘을 구현할 때 큰 고비를 해결할 수 있습니다. 또한, Big-O에 대한 개념을 몰라 난처한 상황에 놓이거나 본인 코드의 개선점을 절대 찾지 못할 수도 있으니 꼭 이해하고 숙지했으면 합니다. 시간복잡도란? -> 여러분들이 택배 기사라고 가정해 봅니다. 수많은 택배 물량을 해소하려면 택배 차량의 최대 적재량으로 배송하며 빠른 시간 내에 모든 가정에 배달을 완료해야 할 것입니다. 이 상황에서 택배의 물량이 감당하지 못할만큼 쏟아진다면 여…","fields":{"slug":"/modern-agile-team/tech2BigO/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 시간복잡도, 공간복잡도","date":"January 06, 2022"}},"next":null,"previous":{"fields":{"slug":"/cs/mysql/"}}}],"categories":["All","회고","BOOKS","코딩테스트","CS","SKILL","EVENT","자료구조","테크톡"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}