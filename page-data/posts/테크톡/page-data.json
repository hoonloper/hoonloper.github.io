{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/테크톡","result":{"pageContext":{"currentCategory":"테크톡","categories":["All","회고","CS","자료구조","프로젝트","경험","테크톡"],"edges":[{"node":{"id":"d6b47a14-5574-56f1-8c1d-7a17c1f7cb17","excerpt":"인증 관련해서 아주 중요한 Refresh Token에 대해 알아보도록 하겠습니다. 이 게시글을 방문한 분들은 JWT(Json Web Token)에 대한 지식이 있다고 생각하고 가볍게 짚고 넘어가겠습니다. JWT란 ? Untitled JWT는 Json Web Token의 약어로, JSON 형식의 데이터를 암호화해 저장하는 토큰이며 다음과 같이 세 부분으로 구성됩니다. 헤더(header): 토큰 종류와 해시 알고리즘 정보 페이로드(payload): 토큰의 내용물이 인코딩된 부분 시그니처(signature): 일련의 문자열, 시그니처를 통해 토큰이 변조되었는지 여부를 확인 장점 간편합니다. 세션/쿠키는 별도의 저장소의 관리가 필요합니다. 그러나 JWT는 발급한 후 검증만 하면 되기 때문에 추가 저장소가 필요 없습니다. 이는 Stateless 한 서버를 만드는 입장에서는 큰 강점입니다. 여기서 Stateless는 어떠한 별도의 저장소도 사용하지 않는, 즉 상태를 저장하지 않는 것을 의미합…","fields":{"slug":"/modern-agile-team/teck12RefreshToken/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Refresh Token","date":"July 15, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech11DbIndex/"}},"previous":{"fields":{"slug":"/modern-agile-team/"}}},{"node":{"id":"d513370c-8dc1-5af6-a2b5-d396f6ad95d6","excerpt":"Index란? 인덱스란 추가적인 쓰기 작업과 저장 공간을 활용하여 데이터베이스 테이블의 검색 속도를 향상시키기 위한 자료구조입니다. 만약 우리가 책에서 원하는 내용을 찾는다고 하면, 책의 모든 페이지를 찾아 보는것은 오랜 시간이 걸립니다. 그렇기 때문에 책의 저자들은 책의 맨 앞 또는 맨 뒤에 색인을 추가하는데, 데이터베이스의 index는 책의 색인과 같은 역할을 합니다. 데이터베이스에서도 테이블의 모든 데이터를 검색하면 시간이 오래 걸리기 때문에 데이터와 데이터의 위치를 포함한 자료구조를 생성하여 빠르게 조회할 수 있도록 해줍니다. 111 인덱스(index)의 관리 DBMS는 index를 항상 최신의 정렬된 상태로 유지해야 원하는 값을 빠르게 탐색할 수 있습니다. 그렇기 때문에 인덱스가 적용된 컬럼에 INSERT, UPDATE, DELETE가 수행된다면 각각 다음과 같은 연산을 추가적으로 해주어야 하며 그에 따른 오버헤드가 발생합니다. 💡 INSERT: 새로운 데이터에 대한 인덱…","fields":{"slug":"/modern-agile-team/tech11DbIndex/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Database Index","date":"June 10, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech10Jenkins/"}},"previous":{"fields":{"slug":"/modern-agile-team/teck12RefreshToken/"}}},{"node":{"id":"9e718ed5-d497-5392-9493-7d4f91ec8c49","excerpt":"111 젠킨스란? 소프트웨어 개발 시 지속적으로 통합 서비스를 제공하는 툴, 즉 CI(Continuous Integration) 툴 이라고 표현합니다. 다수의 개발자들이 하나의 프로그램을 개발할 때 버전 충돌을 방지하기 위해 각자 작업한 내용을 공유영역에 있는 저장소에 빈번히 업로드함으로써 지속적 통합이 가능하도록 해주는 유용한 툴입니다. 💡 모든 언어의 조합과 소스 코드 레포지토리에 대한 **지속적인 통합(Continuous integration, CI)**과 지속적 배포(continuous delivery, CD) 환경을 구축하기 위한 도구이다다. 빌드, 테스트, 배포 프로세스를 자동화하여 소프트웨어 품질과 개발 생산성을 높일 수 있다. 웹사이트 jenkins-ci.org 발표일 2011년 2월 2일 프로그래밍 언어 Java 최근 버전 2.23.3 운영체제 크로스 플랫폼 종류 지속적 통합 라이선스 MIT 젠킨스와 같은 CI툴이 등장하기 전에는 일정시간마다 빌드를 실행하는 방식이…","fields":{"slug":"/modern-agile-team/tech10Jenkins/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 젠킨스(Jenkins)","date":"May 20, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech9TestCode/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech11DbIndex/"}}},{"node":{"id":"21e0ccb4-e407-5ef9-9ede-6271cecf8b2a","excerpt":"이번 포스트는 테스트 코드에 대해 알아보겠습니다. 테스트 코드란? 테스트코드란 내가 작성한 메서드 또는 기능이 재대로 동작하는지 테스트 하는 코드를 뜻합니다. 실제로 개발 방법중 TDD라고 테스트 코드를 먼저 작성한 후 기능을 구현하는 방법도 있습니다. 💡 실패하는 테스트코드 작성 -> 테스트가 성공하는 프로덕션코드 작성 -> 테스트가 성공하면 프로덕션 코드를 리팩토링 테스트 코드를 작성하는 이유 개발 초기 단계에 문제를 발견하게 도와줍니다. 개발자가 나중에 코드를 리팩토링하거나 라이브러리 업그레이드 등에서 기존 기능이 올바르게 작동하는지를 확인할 수 있습니다. 기능에 대한 불확실성을 감소시킬 수 있습니다. 시스템에 대한 실제 문서를 제공합니다.(단위 테스트 자체가 문서로 사용 가능합니다.) 클린한 코드를 작성할 수 있습니다. 개발 시간을 단축할 수 있습니다. 테스트 코드를 사용하지 않는 개발 순서 프로덕션 코드를 작성합니다. 서버를 실행합니다. postman과 같은 api 테스트…","fields":{"slug":"/modern-agile-team/tech9TestCode/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 테스트 코드","date":"May 06, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech8ClassGram/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech10Jenkins/"}}},{"node":{"id":"06309197-44c7-541a-9ebe-61375903c084","excerpt":"이번 포스트는 소프트웨어 개발 프로세스 단계중 계획 및 요구분석, 설계 부분에 해당하는 클래스 다이어그램에 대해 다뤄보겠습니다. 클래스 다이어그램을 알기 이전에 소프트웨어 개발 생명주기(SDLC: Software Development Life Cycle)을 먼저 간단히 알아보고 UML을 살펴본뒤 클래스 다이어그램에 대해 설명하겠습니다! 소프트웨어 개발 생명주기란? 💡 계획 → 분석 → 설계 → 구현 → 테스트 → 유지보수 소프트웨어 개발 프로세스는 6단계(경우에 따라 7단계)입니다. 알아봐야 할 계획 및 요구분석에 대해 살짝 알아보자면 계획 단계 개발 비용 산정 일정 계획 위험 관리 요구분석 단계 기존 시스템의 문제 파악 - 새로운 요구사항 도출 및 다이어그램 작성 개발 방법론에 따른 표현 도구 - 구조적 방법론, 정보공학 방법론, 객체지향 방법론(UML의 유스케이스 다이어그램 등) 최종 산출물 - 요구 분석 명세서 설계 단계 분할과 정복, 추상화, 단계적 분해, 모듈화, 정보 은…","fields":{"slug":"/modern-agile-team/tech8ClassGram/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 클래스 다이어그램","date":"April 08, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech7TryCatch/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech9TestCode/"}}},{"node":{"id":"9e882ca6-a1e9-588d-83df-1fea8c0c81e2","excerpt":"Javascript 문법중 하나인 try - catch에 대해서 알아보겠습니다 😉 try - catch는 에러 핸들링이 필요할 때 주로 사용합니다. 여기서 의문이 들 수 있겠죠! ‘왜 에러 핸들링을 해야 할까??’ 단순하게 생각해보면 프로그램 실행시 에러가 발생하면 해당 프로그램은 종료되어 재실행을 하기 전까지 동작하지 않습니다. 이렇게 되면 프로그램을 사용하는 사용자 입장과 개발자 입장에서 곤란한 상황에 놓일 수 있습니다. 이때 try - catch를 사용하게 되면 프로그램이 종료되지 않고 해당 에러를 잡아 사용자 또는 개발자에게 해당 에러를 알려줄 수 있습니다. 즉, 예상 가능한 에러들과 예상치 못한 에러들을 개발자가 의도하여 보다 완성도 있는 프로그램을 만들어 낼 수 있습니다! try - catch 위 코드는 Javascript 내에서 사용 가능한 try - catch - finally 문법입니다. 111 위 사진은 try - catch 알고리즘을 표현한 사진입니다. 에러가 …","fields":{"slug":"/modern-agile-team/tech7TryCatch/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] try - catch","date":"March 25, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech6middleware/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech8ClassGram/"}}},{"node":{"id":"374265c2-f7bd-50b7-8ffe-b5ac85fb7367","excerpt":"꼭 알고 있어야 하는 것들중 하나인 미들웨어에 대해 알아보겠습니다 🤩 미들웨어 자체에 품고 있는 뜻이 너무나 방대하다 보니 웹 브라우저 기준 미들웨어에 대해 풀어보겠습니다 ! 우선적으로 미들웨어의 정의입니다. 미들웨어는 양 쪽을 연결하여 데이터를 주고 받을 수 있도록 중간에서 매개 역할을 하는 소프트웨어, 네트워크를 통해서 연결된 여러 개의 컴퓨터에 있는 많은 프로세스들에게 어떤 서비스를 사용할 수 있도록 연결해 주는 소프트웨어를 말한다. 3계층 클라이언트/서버 구조에서 미들웨어가 존재한다. 웹 브라우저에서 데이터베이스로부터 데이터를 저장하거나 읽어올 수 있게 중간에 미들웨어가 존재하게 된다. 글 내용에서 알 수 있다 싶이 핵심만 간단 요약하면 ‘양 쪽을 연결하여 중간에서 매개 역할을 함 즉, 웹 브라우저에서 데이터 베이스(DB)로부터 데이터를 저장하거나 읽어올 수 있다.’가 되겠네요. 넓은 범위로는 매개체 간 연결해주는 레이어로써 매개체는 클라이언트(사용자) - 서버, 서버 - …","fields":{"slug":"/modern-agile-team/tech6middleware/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Middleware","date":"March 11, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech5Mysql/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech7TryCatch/"}}},{"node":{"id":"ec90152f-afc8-5098-8cbf-34128318974c","excerpt":"이번 포스팅은 Back-End 개발자라면 꼭 알아야 하는 DBMS 중 하나인 MySQL에 대해 아주 간략하게 알아보겠습니다. WHY? 우리는 왜 MySQL과 같은 DB를 배워야 할까요? 정답은 간단합니다. 이 세상에 존재하는 모든 정보와 파일 및 자료들을 관리해야 하기 때문입니다. 예를들어 모든 정보와 자료를 종이 문서로 보관한다면 어떤 일이 발생할까요? 아마 지구 전체가 종이로 덮일만큼 엄청나게 많은 종이 문서들이 생겨나겠죠. 즉, 모든 데이터 정보 및 자료들의 편리한 유지보수와 접근성을 위해 개발된 게 바로 데이터베이스(DB)의 개념이고 이 DB를 잘 다룰 수 있도록 개발된 데이터베이스 관리 시스템(DBMS) 중 하나인 MySQL이 있습니다! 이제 MySQL이 뭔지, 어떻게 사용해야 하는지 알아봅시다! MySQL이란? MySQL은 현재 세계에서 가장 많이 사용되는 DB 1위, 2위를 다투고 있는 1995년에 발표된 오픈 소스 관계형 데이터 베이스 관리 시스템 입니다. 💡 오픈소…","fields":{"slug":"/modern-agile-team/tech5Mysql/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] MySQL","date":"February 24, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/everytime/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech6middleware/"}}},{"node":{"id":"d2f8082e-998a-511d-bb06-fc419d76e0a9","excerpt":"안녕하세요 👋🏻 오늘은 Back-End를 공부한다면 꼭 알아야 하는 Web Server, NginX에 대해 소개합니다. Web Server와 WAS 개념이 필요하다면 이 포스트를 확인해 주시기 바랍니다 :D WHY? 우리는 왜 NginX를 배워야 할까요? 우리의 일상 속에 녹아드는 IT 기기는 셀 수 없을 정도로 증가하고 있습니다. 그만큼 이용자가 꾸준히 증가하고 있다는 뜻이기도 하지요. 이렇듯 꾸준히 증가하는 이용자들이 하나의 서버로만 집중된다면 어떤 일이 벌어질까요? 서버는 이용자들의 접속량을 못버티고 다운될 것입니다. 그래서, NginX를 통해 이용자들의 접속을 분배하여 서버 과부하를 방지해주고 보안 접속 측면에서 강화할 수 있습니다. 간단요약 : 보안 강화, 서버 과부하 방지(로드밸런싱) NginX란? NginX를 개발한 사람은 러시아의 IgorSysoev라는 개발자입니다. NginX는 동시 접속 처리에 특화되었으며, Apache보다 동작이 단순하고, 전달자 역할만 하는 웹 …","fields":{"slug":"/modern-agile-team/tech4NginX/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] NginX","date":"February 10, 2022"}},"next":{"fields":{"slug":"/modern-agile-team/tech3WasWs/"}},"previous":{"fields":{"slug":"/modern-agile-team/everytime/"}}},{"node":{"id":"16db8a54-5f0b-56e4-a812-1fa2cb72e8cd","excerpt":"Static Pages Web Server는 파일 경로 이름을 받아 경로와 일치하는 file contents를 반환한다. 항상 동일한 페이지를 반환한다. 예시 : Image, HTML, CSS, JavaScript 파일과 같이 컴퓨터에 저장되어 있는 파일들 Dynamic Pages 인자의 내용에 맞게 동적인 contents를 반환한다. 즉, 웹 서버에 의해서 실행되는 프로그램을 통해서 만들어진 결과물입니다. Web Server와 WAS의 차이  Web Server 개념 소프트웨어와 하드웨어로 구분됩니다. 하드웨어 : Web 서버가 설치되어 있는 컴퓨터 소프트웨어 : 웹 브라우저 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠(.html, .jpeg, .css 등)를 제공 기능 HTTP 프로토콜을 기반으로 하여 클라이언트(웹 브라우저 또는 웹 크롤러)의 요청을 서비스 하는 기능을 담당합니다. 요청에 따라 아래의 두 가지 기능 중 적절하게 선택해 수행합니다. 기능 1WAS를 거치지…","fields":{"slug":"/modern-agile-team/tech3WasWs/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] Web Server VS WAS","date":"January 20, 2022"}},"next":{"fields":{"slug":"/cs/mysql/"}},"previous":{"fields":{"slug":"/modern-agile-team/tech4NginX/"}}},{"node":{"id":"c893beaf-0ff8-5764-ad57-7d2b97fc67ad","excerpt":"-> 간단하게 설명하면 알고리즘의 효율성을 나타내는 지표 혹은 언어입니다. Big-O를 확실히 이해하고 있어야 알고리즘을 구현할 때 큰 고비를 해결할 수 있습니다. 또한, Big-O에 대한 개념을 몰라 난처한 상황에 놓이거나 본인 코드의 개선점을 절대 찾지 못할 수도 있으니 꼭 이해하고 숙지했으면 합니다. 빅-오(Big-O)는 무엇일까? -> 간단하게 설명하면 알고리즘의 효율성을 나타내는 지표 혹은 언어입니다. Big-O를 확실히 이해하고 있어야 알고리즘을 구현할 때 큰 고비를 해결할 수 있습니다. 또한, Big-O에 대한 개념을 몰라 난처한 상황에 놓이거나 본인 코드의 개선점을 절대 찾지 못할 수도 있으니 꼭 이해하고 숙지했으면 합니다. 시간복잡도란? -> 여러분들이 택배 기사라고 가정해 봅니다. 수많은 택배 물량을 해소하려면 택배 차량의 최대 적재량으로 배송하며 빠른 시간 내에 모든 가정에 배달을 완료해야 할 것입니다. 이 상황에서 택배의 물량이 감당하지 못할만큼 쏟아진다면 여…","fields":{"slug":"/modern-agile-team/tech2BigO/"},"frontmatter":{"categories":"테크톡","title":"[Tech-Talk] 시간복잡도, 공간복잡도","date":"January 06, 2022"}},"next":null,"previous":{"fields":{"slug":"/cs/mysql/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}