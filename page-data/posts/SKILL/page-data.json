{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/SKILL","result":{"pageContext":{"currentCategory":"SKILL","categories":["All","회고","교재","알고리즘","CS","SKILL","행사","자료구조","테크톡"],"edges":[{"node":{"id":"3946968e-89f6-5c12-b296-21fa5b5734bf","excerpt":"안녕하세요. 이번 포스트는 Promise.all을 활용해 테스트 코드의 동작 시간을 단축한 경험을 풀어보려 해요. 동기와 비동기가 무엇인지에 대해서는 인터넷에 너무나 많은 양질의 자료들이 많으니 여기서는 설명을 스킵할게요 :) 진득하게 테스트 코드를 작성하고 있던 저는 한가지 고민에 빠졌어요. 테스트 코드가 늘어날수록 테스트 시간이 늘어나 견디기 힘들만큼 길어져 더이상은 안되겠다 싶었죠. 테스트 DB에 접근해 데이터를 가져오지만 데이터 양이 많아 한번 get 요청에 평균 1초가 걸렸어요. DB에서 뽑아오는 API를 수정하지 않는 이상 속도 개선에 대한 부분은 감안하고 진행해야 했어요 😭 그래서 작성하고 있던 제 테스트 코드를 뜯어 고치기로 마음을 다짐했어요! 다른 테스트 코드들은 상관이 없으니 실질적으로 문제를 일으키는 녀석들은 필터링 관련 테스트였어요. 필터링 관련 항목이 약 20개며, 정렬 관련 항목이 약 15개 정도 되니 총 35번의 API 호출이 연속적으로 이뤄지고 평균 1…","fields":{"slug":"/skills/promise-all/"},"frontmatter":{"categories":"SKILL","title":"[Skill] Promise.all을 활용해 동작 시간 단축","date":"October 26, 2022"}},"next":{"fields":{"slug":"/event/nestjs2/"}},"previous":{"fields":{"slug":"/cs/mongodb/"}}},{"node":{"id":"e103338a-256a-5c3d-8b1b-74048c7170cb","excerpt":"Aggregation??? 몽고DB의 Aggregation은 데이터 처리 파이프라인 개념을 모델로 합니다. 어그리게이션은 다중 스테이지 파이프라인을 사용할 수 있는데 원하는 데이터 형식 혹은 값들을 필터해서 출력할 수 있습니다. 어그리게이션 작업은 데이터를 처리하여 계산된 결과를 반환합니다. 어그리게이션은 여러 도큐먼트의 값을 그룹화하고, 데이터에 다양한 작업을 수행한 후 단일 결과를 반환할 수 있습니다. MongoDB는 세 가지 어그리게이션을 제공합니다. Aggregation Pipeline Single Purpose Aggregation Operations Map-reduce 위 코드와 같이 첫번째 스테이지는 이고 두번째 스테이지는 입니다. 매치는 조건과 같은 역할을 수행하며 그룹은 그룹화를 통해 유니크한 값들의 합을 계산하거나 원하는 동작을 수애하게 할 수 있습니다. 이 외에도 다양한 스테이지들이 있으며, 스테이지의 순서는 아래와 같습니다. pipeline 순서 collect…","fields":{"slug":"/skills/mongodb-aggregation/"},"frontmatter":{"categories":"SKILL","title":"[Skill] MongoDB Aggregation이란?","date":"October 18, 2022"}},"next":{"fields":{"slug":"/cs/js-vs-ts/"}},"previous":{"fields":{"slug":"/event/nestjs2/"}}},{"node":{"id":"9b5ac0ef-fa15-5cd1-91cb-97cadfd4b6ab","excerpt":"111 프리즈마를 선택해야 하는 이유 Prisma의 주요 목표는 데이터베이스 작업 시 애플리케이션 개발자의 생산성을 높이는 것입니다. 다음은 Prisma의 목표를 이루기 위한 몇 가지 예입니다. 관계형 데이터를 매핑하는 대신 개체에서 생각하기 복잡한 모델 객체를 피하기 위해 클래스가 아닌 쿼리 데이터베이스 및 애플리케이션 모델을 위한 단일 정보 소스 일반적인 함정과 반패턴을 방지하는 제약 쉽게 만드는 추상화 컴파일 시 유효성을 검사할 수 있는 유형 안전 데이터베이스 쿼리 개발자가 앱의 중요한 부분에 집중할 수 있도록 상용구 감소 문서를 찾을 필요 없이 코드 편집기에서 자동 완성 SQL, ORM 및 기타 데이터베이스 도구의 문제 현재 Node.js 및 TypeScript 에코시스템에 존재하는 데이터베이스 도구의 주요 문제는 생산성과 제어 간의 주요 절충점이 필요하다는 것 입니다. 원시 SQL: 전체 제어, 낮은 생산성 원시 SQL(예: 기본 pg또는 mysqlNode.js 데이터베이…","fields":{"slug":"/skills/prisma2/"},"frontmatter":{"categories":"SKILL","title":"[Skill] Prisma Proj-2","date":"September 18, 2022"}},"next":{"fields":{"slug":"/skills/prisma/"}},"previous":{"fields":{"slug":"/cs/js-vs-ts/"}}},{"node":{"id":"9c3f3a71-ad7c-5f99-8d95-14b528e0b078","excerpt":"111 소규모 프로젝트의 Back-End 개발을 시작했습니다. Nest X TypeORM 조합만 사용해왔던 저는 새로운 기술을 배워보고 싶어 평소 흥미롭게 바라보던 Prisma를 적용해보기로 결정합니다. 공식 문서에서 설명하는 Prisma는 이렇습니다. 프리즈마란? Prisma는 오픈 소스 차세대 ORM입니다. 다음 부분으로 구성됩니다. Prisma Client : Node.js 및 TypeScript를 위한 자동 생성 및 유형 안전 쿼리 빌더 Prisma Migrate : 마이그레이션 시스템 Prisma Studio : 데이터베이스의 데이터를 보고 편집하는 GUI Prisma Client는 모든 Node.js(지원 버전) 또는 TypeScript 백엔드 애플리케이션(서버리스 애플리케이션 및 마이크로서비스 포함)에서 사용할 수 있습니다. 프리즈마의 작동 방식 RDBMS NoSQL 이 스키마에서는 세 가지를 구성합니다. Data source : 데이터베이스 연결을 지정합니다(환경 변…","fields":{"slug":"/skills/prisma/"},"frontmatter":{"categories":"SKILL","title":"[Skill] Prisma Proj-1","date":"September 18, 2022"}},"next":{"fields":{"slug":"/cs/transaction/"}},"previous":{"fields":{"slug":"/skills/prisma2/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}