{"componentChunkName":"component---src-templates-blog-template-js","path":"/retrospect/2022-마지막-회고/","result":{"data":{"cur":{"id":"b40ce09b-cf0e-515f-834a-509512e42b7a","html":"<p>안녕하세요. 어느덧 개발 공부를 시작한지 1년이 채워졌고 개발자로 총 5개월쯤 업무를 봤네요. 이제부터 들려드릴 이야기는 흔하고 특색은 떨어지지만 담백한 개발자의 1년 이야기입니다.</p>\n<blockquote>\n<p>~ 2022년 12월 21일</p>\n</blockquote>\n<h2 id=\"-어느새\" style=\"position:relative;\"><a href=\"#-%EC%96%B4%EB%8A%90%EC%83%88\" aria-label=\" 어느새 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🫢 어느새?!</h2>\n<p>2021년 12월 6일 동아리 활동을 시작으로 제 개발 커리어가 시작됐습니다. 처음 막 공부를 시작할 때는 정말 개발자로 취직할 수 있을지 걱정이 태산같았어요. 이런 걱정들을 잊으려고 자신감을 불어 넣으며 힘차게 달렸더니 어느순간 개발자로 현업에서 일을 하고 있군요.</p>\n<p>물론 지금까지 힘차게 달렸던 것만은 아닙니다. 흔히 말하는 개발 권태기를 저도 한번 겪었었고 더 높은 곳을 향해 달려가고 싶은 욕망은 크지만 한참 모자란 것 같은 기분에 우울했던 적도 있지요. 이런 다양한 스토리들을 간략하게 풀어볼까 해요!</p>\n<h2 id=\"-개발-시작\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%B0%9C-%EC%8B%9C%EC%9E%91\" aria-label=\" 개발 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🏃🏻 개발 시작!</h2>\n<p>위에서 말했듯 작년 12월에 공부를 시작했습니다. 모던 애자일이라는 동아리에 가입해 개발에 ‘개’자도 모르는 상태로 프로젝트 리더 직책을 맡아 개발을 시작했습니다. 프로그래밍 언어, 각종 CS 지식 등 개발 관련한 내용에 전무했기에 프로젝트 성사에 큰 부담을 느꼈었죠. 당시에 긴장감이 지금의 개발자 정용훈이 있을 수 있는 원동력이지 않나 싶어요 😂</p>\n<p>처음 시작한 프로젝트는 모해(Mohae) 플랫폼이에요! 모해는 ‘모두의 해결사’의 줄임말로 사회 초년생, 대학생을 타겟으로 도움을 필요로하는 모든 사람들에게 재능을 기부할 수 있는 오작교?같은 연결 다리 역할입니다. 사실 모해 플랫폼 이전에 미니 프로젝트로 ‘에브리타임’ 클론 코딩을 진행했으나 연습용 토이 프로젝트이기에 비중이 높지 않았습니다. 각설하고 모해 플랫폼을 진행하면서 정말 다양한 사건들이 있었어요.</p>\n<p>단편적인 예시로 Nest.js 프레임워크를 사용하게 된 스토리가 있어요. 모던 애자일 동아리는 기수제로 운영되는데 저는 3기 회장이었습니다. 어느 날 윗 기수(1기, 2기)분들과 저녁 식사 자리를 갖게 되었어요. 당시 모해 프로젝트 기획 단계였던지라 정말 아무것도 모르는 상태였죠. 그때 윗 기수분들 중 한분이 Nest.js를 사용해보라고 적극 권유해줬죠. 저는 Node의 프레임워크 역할을 한다는 Nest.js에 매력을 느꼈고 메모를 해둔 뒤 다음 날 조사를 시작했어요. <em>조사에 대한 내용은 생략하겠습니다 🤪</em> 조사 내용을 정리해서 같은 Back-End 팀원들에게 공유와 함께 모해 프로제트에서 Nest.js 프레임워크를 사용하자고 적극 어필했어요. 다행이 팀원들은 설득이 됐고 Nest.js를 사용하게 됐습니다 👏🏻👏🏻👏🏻 하지만 시간이 흘러 팀원이 얘기해 주기를 Node에 대해서도 아직 모르는데 Nest.js는 너무 성급한 느낌이 들어 반대 입장이었다고 하더라고요. 프로젝트 리더인 저를 믿고 밑져야 본전으로 시작했다고 하는데 결과론적으로 Nest.js를 사용한 게 도움이 너무나 많이 됐다고 고맙다는 인사를 전하는 것을 보고 많이 뿌듯했습니다. 사실 저도 불안함은 좀처럼 쉽게 사라지지 않았거든요. 저를 믿어준 팀원에게 고맙고 팀원도 함께 극복해나가 도움이 됐다고 하니 완전 윈윈이네요?!🥳 이런 비하인드 스토리가 숨어있었답니다~</p>\n<p>다음은 모던 애자일 4기 모집과 관련된 제 스토리가 하나 있습니다. 저는 첫 직장을 2022년 7월 중순에 출근을 했어요. 모던 애자일 4기 모집 기간은 6월이었고 함께 활동을 시작한 일은 7월 초에요. 네 2주만 함께 활동하고 회장은 직장으로 런을…은 아니고 합격 발표시 팀원들에게 의견을 구하고 모두 혼쾌히 보내줘서 안심하고 취업을 할 수 있었어요. 이때 제가 회장의 역할을 못하진 않았다는 느낌을 받아 보람찼습니다. 취업을 해서도 관리는 멈추지 않았고 3기 인원들은 무사히 프로젝트 배포를 마쳐 8월 말에 활동이 종료됐습니다. 현재도 지속적으로 유지보수를 진행중이고요!</p>\n<h2 id=\"-첫-직장\" style=\"position:relative;\"><a href=\"#-%EC%B2%AB-%EC%A7%81%EC%9E%A5\" aria-label=\" 첫 직장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💼 첫 직장..!</h2>\n<p>여름에 합격한 제 첫 직장은 조금 특별했어요. 서류를 넣은 곳들 중 유일하게 서류 합격, 그리고 첫 면접에 최종 합격을 통보 받고 업계 평균 이상의 처우를 받게 되어 당시에 너무 행복했습니다. 현재는 이직 후 업무를 보고 있지만 첫 직장의 경험으로 많은 것을 깨달아서 만족합니다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>제 체감상으로 3년은 지난 것 같은데 이제 1년이 지나네요. 2023년에는 어떤 일들이 펼쳐질지 누구도 알 수 없지만 지금까지 지켜왔던 신념 그대로 밀고 나가서 원하는 목표에 도달할 때까지 우직하게 보내려고 합니다. 저뿐만 아니라 모든 분들 2022년 고생했고 2023년에는 원하는 모든 게 이뤄지길 바랍니다 🙏🏼</p>\n<p><strong>감사합니다 🙇</strong></p>","excerpt":"안녕하세요. 어느덧 개발 공부를 시작한지 1년이 채워졌고 개발자로 총 5개월쯤 업무를 봤네요. 이제부터 들려드릴 이야기는 흔하고 특색은 떨어지지만 담백한 개발자의 1년 이야기입니다. ~ 2022년 12월 21일 🫢 어느새?! 2021년 12월 6일 동아리 활동을 시작으로 제 개발 커리어가 시작됐습니다. 처음 막 공부를 시작할 때는 정말 개발자로 취직할 수 있을지 걱정이 태산같았어요. 이런 걱정들을 잊으려고 자신감을 불어 넣으며 힘차게 달렸더니 어느순간 개발자로 현업에서 일을 하고 있군요. 물론 지금까지 힘차게 달렸던 것만은 아닙니다. 흔히 말하는 개발 권태기를 저도 한번 겪었었고 더 높은 곳을 향해 달려가고 싶은 욕망은 크지만 한참 모자란 것 같은 기분에 우울했던 적도 있지요. 이런 다양한 스토리들을 간략하게 풀어볼까 해요! 🏃🏻 개발 시작! 위에서 말했듯 작년 12월에 공부를 시작했습니다. 모던 애자일이라는 동아리에 가입해 개발에 ‘개’자도 모르는 상태로 프로젝트 리더 직책을 맡아…","frontmatter":{"date":"December 21, 2022","title":"[회고] 2022년을 돌아보며","categories":"회고","author":"hoonloper","emoji":"👣"},"fields":{"slug":"/retrospect/2022-마지막-회고/"}},"next":{"id":"183c6e41-8f47-50a9-aba1-709c5b84b45a","html":"<p>이번에 구간합구하기5를 풀면서 숙지해야 할 내용을 정리하려 합니다.</p>\n<p><strong>정답</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 입력 생략</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">+</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xy <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> counts <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> psum <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      psum<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psum<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> psum<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> psum<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> xy<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> counts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>psum<span class=\"token punctuation\">[</span>x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y2<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>psum<span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y2<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> psum<span class=\"token punctuation\">[</span>x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> psum<span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>풀이</strong></p>\n<p>우선 psum을 만들기 위한 반복문입니다.</p>\n<p>입력은 2차원 배열로 들어오기 때문에 좌표값을 생각해서 누적합을 진행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    psum<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psum<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> psum<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> psum<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> xy<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예를들어 아래와같이 1, 2, 3, 4라는 2차원 배열이 있으면 좌표 (2, 2)의 누적합은 10이 됩니다.</p>\n<p>(1, 2)의 누적합은 3, (2, 1)의 누적합은 4이기 때문에 (1, 2) + (2, 1) + (2, 2)를 해주면 11이 나옵니다. 이때 (1, 1)은 두번 더해짐으로 한번 빼주면 10이 나오게 됩니다. 이 공식이 <code class=\"language-text\">psum[x + 1][y + 1] = psum[x][y + 1] + psum[x + 1][y] - psum[x][y] + xy[x][y];</code> 이 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 2\n3 4</code></pre></div>\n<p>2차원 배열의 누적합을 구했으니 다음으로 해당 지정된 좌표값의 구간합을 구해봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> counts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>psum<span class=\"token punctuation\">[</span>x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y2<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>psum<span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y2<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> psum<span class=\"token punctuation\">[</span>x2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> psum<span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래 숫자는 위 예제의 누적합 배열(psum)입니다.</p>\n<p>x1, y1(2, 2), x2, y2(2, 2)의 구간합을 구하면 정답은 4입니다. 왜 정답이 4일까요?</p>\n<p>우선 시작 좌표 = 끝 좌표 입니다. 즉 (2, 2)의 값을 구하면 됩니다. 그럼 누적합 값으로 계산해봅시다. (2, 2) 값은 10입니다. (2, 2)가 나오기 위해서는 (1, 2)와 (2, 1)의 값을 더해줬습니다. 그럼 반대로 빼주면 됩니다. (1, 2)의 값인 3과 (2, 1)의 값인 4를 빼주면 3이 나오는데 이 때 (1, 1)은 두번 뺄셈이 이루어지기 때문에 (1, 1)을 한 번 더해줍니다. 그럼 원하는 값인 4가 나오는 것입니다. 그 공식이 바로 <code class=\"language-text\">psum[x2][y2] - (psum[x1 - 1][y2] + psum[x2][y1 - 1]) + psum[x1 - 1][y1 - 1]</code> 이것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 3\n4 10</code></pre></div>\n<p>누적합을 풀면서 이해한 내용을 정리하려 하니 생각보다 횡설수설하는 느낌이 강하네요.. 좀 더 많은 문제를 풀어보면서 누적합을 확실히 제 것으로 만들어야겠습니다.</p>","frontmatter":{"date":"December 18, 2022","title":"[알고리즘] 구간합구하기5(백준11660) - 누적합(Prefix Sum)","categories":"알고리즘","author":"hoonloper","emoji":"🧠"},"fields":{"slug":"/algorithm/prefix-sum-3/"}},"prev":{"id":"031d9f1d-c66f-5fd4-9e1f-797bc9626413","html":"<p>누적합 알고리즘을 사용하는 코딩테스트 문제를 풀다가 제대로 정리해놔야 나중에 잊어버리더라도 금방 다시 배울 수 있어 정리글로 남겨놓습니다!</p>\n<h3 id=\"누적합이란\" style=\"position:relative;\"><a href=\"#%EB%88%84%EC%A0%81%ED%95%A9%EC%9D%B4%EB%9E%80\" aria-label=\"누적합이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>누적합이란??</h3>\n<blockquote>\n<p>요소들의 누적된 합의 의미로 어떠한 배열을 기반으로 앞에서 부터 요소들의 누적된 합을 저장해 새로이 배열을 만들어서 이를 활용하는 것을 말합니다.</p>\n</blockquote>\n<ul>\n<li>prefix sum: 앞에서부터 더함</li>\n<li>suffix sum: 뒤에서부터 더함</li>\n</ul>\n<p>prefix sum을 만들 때는 0번째를 비어놓고 1번째 index부터 데이터를 담아둡니다.</p>\n<p>prefix sum의 첫 번째 요소는 첫 번째 요소값, 두 번째 요소는 첫 번째와 두 번째의 누적합, 세 번째 요소는 첫 번째부터 세 번째까지의 누적합이 반복되어 마지막 요소는 전체 요소의 누적합이 됩니다.</p>\n<p>💡 TIP: 문제를 풀 때 <code class=\"language-text\">구간</code>에 대한 많은 <code class=\"language-text\">쿼리</code>가 나올 때 생각해야 될 것은 트리 혹은 누적합입니다. 여기서 트리는 세그먼트, 펜윅트리를 뜻합니다. 이 때 그 구간 안에 있는 요소들이 변하지 않는 정적 요소라면 누적합을 쓰면 됩니다.</p>\n<p>출처:\n<a href=\"https://www.youtube.com/watch?v=906Kko5nZhE\">https://www.youtube.com/watch?v=906Kko5nZhE</a></p>","frontmatter":{"date":"December 25, 2022","title":"[알고리즘] 누적합(Prefix Sum)이란?","categories":"알고리즘","author":"hoonloper","emoji":"🧠"},"fields":{"slug":"/algorithm/prefix-sum/"}},"site":{"siteMetadata":{"siteUrl":"https://hoonloper.com","comments":{"utterances":{"repo":"hoonloper/hoonloper.github.io"}}}}},"pageContext":{"slug":"/retrospect/2022-마지막-회고/","nextSlug":"/algorithm/prefix-sum-3/","prevSlug":"/algorithm/prefix-sum/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}