{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/everytime/",
    "result": {"data":{"cur":{"id":"e37cf59e-4880-501e-86a0-09e752347a9c","html":"","excerpt":"","frontmatter":{"date":"February 15, 2022","title":"모애-타임[에브리 타임 클론 코딩]","categories":"프로젝트","author":"hoonloper","emoji":"⏰"},"fields":{"slug":"/everytime/"}},"next":{"id":"d2f8082e-998a-511d-bb06-fc419d76e0a9","html":"<iframe width=\"720\" height=\"420\" src=\"https://www.youtube.com/embed/H-oG6_g0L4E\" title=\"테크톡🎤 NginX - 정용훈(3기)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h3 id=\"안녕하세요\" style=\"position:relative;\"><a href=\"#%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94\" aria-label=\"안녕하세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>안녕하세요 👋🏻</h3>\n<h3 id=\"오늘은-back-end를-공부한다면-꼭-알아야-하는-web-server-nginx에-대해-소개합니다\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%80-back-end%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%9C%EB%8B%A4%EB%A9%B4-%EA%BC%AD-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-web-server-nginx%EC%97%90-%EB%8C%80%ED%95%B4-%EC%86%8C%EA%B0%9C%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"오늘은 back end를 공부한다면 꼭 알아야 하는 web server nginx에 대해 소개합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘은 Back-End를 공부한다면 꼭 알아야 하는 Web Server, NginX에 대해 소개합니다.</h3>\n<h3 id=\"web-server와-was-개념이-필요하다면-이-포스트를-확인해-주시기-바랍니다-d\" style=\"position:relative;\"><a href=\"#web-server%EC%99%80-was-%EA%B0%9C%EB%85%90%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4%EB%A9%B4-%EC%9D%B4-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4-%EC%A3%BC%EC%8B%9C%EA%B8%B0-%EB%B0%94%EB%9E%8D%EB%8B%88%EB%8B%A4-d\" aria-label=\"web server와 was 개념이 필요하다면 이 포스트를 확인해 주시기 바랍니다 d permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Server와 WAS 개념이 필요하다면 이 <a href=\"https://dehw.tistory.com/77?category=1070332\">포스트</a>를 확인해 주시기 바랍니다 :D</h3>\n<h2 id=\"why\" style=\"position:relative;\"><a href=\"#why\" aria-label=\"why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>WHY?</strong></h2>\n<p>우리는 왜 NginX를 배워야 할까요?</p>\n<p>우리의 일상 속에 녹아드는 IT 기기는 셀 수 없을 정도로 증가하고 있습니다. 그만큼 이용자가 꾸준히 증가하고 있다는 뜻이기도 하지요. 이렇듯 꾸준히 증가하는 이용자들이 하나의 서버로만 집중된다면 어떤 일이 벌어질까요?</p>\n<p>서버는 이용자들의 접속량을 못버티고 다운될 것입니다. 그래서, NginX를 통해 이용자들의 접속을 분배하여 서버 과부하를 방지해주고 보안 접속 측면에서 강화할 수 있습니다.</p>\n<blockquote>\n<p>간단요약 : 보안 강화, 서버 과부하 방지(로드밸런싱)</p>\n</blockquote>\n<hr>\n<h2 id=\"nginx란\" style=\"position:relative;\"><a href=\"#nginx%EB%9E%80\" aria-label=\"nginx란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>NginX란?</strong></h2>\n<ul>\n<li>NginX를 개발한 사람은 러시아의 IgorSysoev라는 개발자입니다.</li>\n<li>NginX는 동시 접속 처리에 특화되었으며, Apache보다 동작이 단순하고, 전달자 역할만 하는 웹 서버 프로그램입니다.</li>\n</ul>\n<h2 id=\"nginx의-역할\" style=\"position:relative;\"><a href=\"#nginx%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"nginx의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>NginX의 역할</strong></h2>\n<h3 id=\"정적-파일을-처리하는-http-서버로서의-역할\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-http-%EC%84%9C%EB%B2%84%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"정적 파일을 처리하는 http 서버로서의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 파일을 처리하는 HTTP 서버로서의 역할</h3>\n<ul>\n<li>HTML, CSS, JavaScript, 이미지와 같은 정보를 웹 브라우저에 HTTP 프로토콜을 준수하여 전송하는 역할을 합니다.</li>\n</ul>\n<h3 id=\"응용프로그램-서버에-요청을-보내는-리버스-프록시로서의-역할\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EC%9A%A9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%9C%EB%B2%84%EC%97%90-%EC%9A%94%EC%B2%AD%EC%9D%84-%EB%B3%B4%EB%82%B4%EB%8A%94-%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"응용프로그램 서버에 요청을 보내는 리버스 프록시로서의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>응용프로그램 서버에 요청을 보내는 리버스 프록시로서의 역할</h3>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405628-ee85e5b4-8732-463b-a568-b487fb723a5a.png\" alt=\"Untitled\"></p>\n<ul>\n<li>리버스 프록시는 클라이언트가 웹서버(NginX)에 요청을 하면 웹서버가 서버를 통해 요청에 맞는 응답을 클라이언트에게 전달합니다.</li>\n<li>리버스 프록시를 사용하는 이유는 클라이언트의 요청이 많을 경우 한 서버에서 모든 요청을 처리하기 어렵기 때문에 NginX를 통해 로드밸런싱으로 서버 과부하를 줄여줍니다.</li>\n<li>또한 http요청(80)이 들어와도 NginX에서 https요청(443)으로 변환해주기 때문에 보안적인 면에서도 좋은 성능을 보여줍니다.</li>\n<li>NginX는 비동기 처리 방식(Event-Driven)을 채택하고 있습니다.</li>\n</ul>\n<blockquote>\n<p>동기(Sychronous) : 하나의 요청이 끝나야 다음 요청 처리 가능<br>\n비동기(Asynchronous) : 하나의 요청이 끝나지 않더라도 다음 요청 처리 가능</p>\n</blockquote>\n<h2 id=\"nginx를-이용해-aws-ec2-rds-및-nodejsexpress-연동--mysql\" style=\"position:relative;\"><a href=\"#nginx%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-aws-ec2-rds-%EB%B0%8F-nodejsexpress-%EC%97%B0%EB%8F%99--mysql\" aria-label=\"nginx를 이용해 aws ec2 rds 및 nodejsexpress 연동  mysql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NginX를 이용해 AWS EC2, RDS 및 Node.js(express) 연동 + MySQL</h2>\n<blockquote>\n<p>준비물</p>\n<ul>\n<li>실습할 장비(컴퓨터, 마우스, 키보드 등)</li>\n<li>AWS 회원가입</li>\n<li>Test할 Node 서버 코딩(npm, node, express, mysql 등)</li>\n<li>멘탈</li>\n</ul>\n</blockquote>\n<p>이번에는 위 NginX를 직접 설치하고 적용해보겠습니다.</p>\n<p>저는 NginX를 설치하면서 수많은 오류와 시행 착오를 겪었습니다. 이 블로그를 방문해 주시는 여러분들은 보다 수월하게 설치하셨으면 하는 마음이 있습니다.</p>\n<blockquote>\n<p>💡 본 포스팅은 NginX가 주이기 때문에 AWS EC2 인스턴스 및 RDS 생성 과정은 생략하겠습니다.<br>\n필자는 맥(MAC), EC2 인스턴스 ubuntu 환경에서 실습을 진행하니 참고 바랍니다 :D</p>\n</blockquote>\n<h3 id=\"1-aws-ec2-인스턴스\" style=\"position:relative;\"><a href=\"#1-aws-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\" aria-label=\"1 aws ec2 인스턴스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AWS EC2 인스턴스</h3>\n<blockquote>\n<p>💡 검색창[EC2] → 인스턴스(실행 중) 클릭 → [생성한 인스턴스 ID 클릭]</p>\n</blockquote>\n<p>인스턴스를 생성했다면 접속해서 IP를 확인합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405643-5ced5b53-f216-4510-a7fa-57ec44937a98.png\" alt=\"Untitled 1\"></p>\n<h3 id=\"2-aws-rds-데이터베이스\" style=\"position:relative;\"><a href=\"#2-aws-rds-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4\" aria-label=\"2 aws rds 데이터베이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. AWS RDS 데이터베이스</h3>\n<blockquote>\n<p>💡 검색창[rds] → 데이터베이스 → [생성한 DB 클릭]</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405651-014776c4-8eae-46d1-a30b-98b9d730cef6.png\" alt=\"Untitled 2\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405654-447727db-0a4b-4787-ba5c-fa58645791fb.png\" alt=\"Untitled 3\"></p>\n<h3 id=\"3-ec2-연결부터-pm2-nginx-연동까지\" style=\"position:relative;\"><a href=\"#3-ec2-%EC%97%B0%EA%B2%B0%EB%B6%80%ED%84%B0-pm2-nginx-%EC%97%B0%EB%8F%99%EA%B9%8C%EC%A7%80\" aria-label=\"3 ec2 연결부터 pm2 nginx 연동까지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. EC2 연결부터 PM2, NginX 연동까지</h3>\n<p>AWS EC2에서 인스턴스를 생성했으면 .pem(암호키)를 받았을 것입니다.</p>\n<p>해당 암호키가 있는 경로로 이동해 명령어를 통해 EC2에 접속합니다.</p>\n<blockquote>\n<p>💡 ssh -i “암호키명.pem” ubuntu@(AWSEC2경로) * ubuntu는 EC2 인스턴스 설정에 따라 바뀔 수 있습니다.<br>\n필자는 맥(MAC), EC2 인스턴스 ubuntu 환경에서 실습을 진행합니다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405656-a1aff23b-8d30-46ab-bc97-bb71aaae4943.png\" alt=\"Untitled 4\"></p>\n<p>암호키와 도메인을 제대로 입력했으면 정상적으로 접속이 완료됐을 것입니다.</p>\n<p>여기서 Node.js 서버를 구현한 코드를 git clone 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">본인의 서버 코드가 저장되어있는 github 저장소를 클론합니다.\ngit clone https://github.com/~/~.git</code></pre></div>\n<p>자, 이제 NPM 및 node를 설치해주고 NginX와 PM2를 적용해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 전역 설치\nsudo apt-get install npm\nsudo apt-get install node</code></pre></div>\n<p>설치가 완료되면 위 클론한 서버 코드 폴더로 이동합니다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd 서버폴더명</code></pre></div>\n<p>서버 가동에 필요한 모듈을 다운받아줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 서버 가동에 필요한 express와 DB를 활용할 mysql 및 env를 설치합니다.\n// 필자는 package.json을 통해 npm i만으로 전체 설치가 가능합니다.\nsudo npm i express\nsudo npm i dotenv\nsudo npm i env\nsudo npm i mysql2\nsudo npm i nodemon // PM2 적용하기 전 서버가 열리는지 확인하기 위한 모듈</code></pre></div>\n<p>설치가 완료됐으면 서버 가동을 테스트합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405660-e3fe72f1-1030-489d-996d-0e8b0ffa4a28.png\" alt=\"Untitled 5\">\n<img src=\"https://user-images.githubusercontent.com/78959175/186405662-90c9cd1d-f2c9-420c-b9c3-82e580dbdc31.png\" alt=\"Untitled 6\"></p>\n<p>정상적으로 가동되는 것을 확인할 수 있습니다.</p>\n<p>그럼 지금부터 NginX를 적용해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// nginx와 pm2를 설치합니다.\nsudo apt-get install nginx\nsudo npm i pm2 -g</code></pre></div>\n<p>NginX 설치를 완료하고 EC2 퍼블릭 IP로 포트번호 없이 접속합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405666-39d414bf-3756-4c6d-85b4-65a234b43673.png\" alt=\"Untitled 7\"></p>\n<p>이런 화면이 나타나면 정상적으로 설치가 완료됐다는 뜻입니다.</p>\n<p>pm2는 정상적으로 설치가 됐다면 바로 아래와 같은 터미널 화면이 보이겠지만 혹시 확인을 못했다면 pm2 list 명령어를 이용해 확인이 가능합니다.</p>\n<p>이 명령어 말고도 다양한 명령어들이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pm2 start &lt;서버실행파일> // pm2로 서버 가동\npm2 restart &lt;server_name 또는 server_id> // 서버 재시작\npm2 reload &lt;server_name 또는 server_id> // 서버 설정 로드\npm2 stop &lt;server_name 또는 server_id> // 서버 중단\npm2 delete &lt;server_name 또는 server_id> // 서버 중단 및 리스트에서 삭제\n\npm2 list // pm2로 가동중인 서버의 목록을 나타냄\npm2 logs &lt;server_name 또는 server_id> // 해당 서버의 로그를 출력해줌\npm2 startup // 서버 구동시 자동으로 실행하는 스크립트를 생성\npm2 ecosystem // 명령어로 실행된 pm2를 config 파일로 만듦\npm2 monit // 터미널로 확인 가능한 대쉬보드</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405668-e30d7391-a48d-41fa-9368-c765f3f20265.png\" alt=\"Untitled 8\"></p>\n<blockquote>\n<p>💡 PM2에 대해 간단히 설명하자면, PM2는 서버 터미널을 종료하더라도 서버가 지속적으로 가동될 수 있도록 유지가 가능한<br>\n기능이 있습니다 :D<br>\n자세한 PM2 내용은 따로 다루겠습니다.</p>\n</blockquote>\n<p>NginX 설치 완료와 서버 구동이 확인되었습니다. NginX는 위에서 설명했듯 경로를 지정해줄 수 있습니다.</p>\n<p>일반적으로 http로 접속하면 80번 포트, https로 접속하면 443번 포트를 사용합니다. NginX는 이 포트로 요청이 들어올 경우 관리자가 지정한 포트로 우회가 가능합니다.</p>\n<p>지금부터 설정을 시작하겠습니다. 초기 설정은 매우 간단하니 모두들 해낼 수 있습니다.</p>\n<p>다시 터미널로 돌아와 아래 명령어를 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo nano /etc/nginx/sites-available/default\n또는\nsudo nano /etc/nginx/sites-enabled/default</code></pre></div>\n<p>정상적으로 편집 명령이 실행되면 아래와 같은 화면이 나타나게 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405671-9bfaa3cd-b88a-415c-80aa-1f69d4fae4e8.png\" alt=\"Untitled 9\"></p>\n<p>아래로 내리다보면 location / 부분이 있는데 아래와 같이 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">location / {\n            # First attempt to serve request as file, then\n          # as directory, then fall back to displaying a 404.\n\n          proxy_pass http://EC2퍼블릭IP:서버가동포트;\n          # try_files $uri $uri/ =404;\n}</code></pre></div>\n<p>proxy_pass에 EC2 퍼블릭 IP와 서버가동포트를 작성해주고 나머지 부분들은 전부 주석처리합니다.</p>\n<p>이후 [(윈도우)컨트롤 + s → 컨트롤 + x] 또는 기본[컨트롤 + x → Y → Enter]를 입력해 저장하고 빠져나옵니다.</p>\n<p>NginX 설정을 변경하면 NginX를 재시작해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo service nginx restart\nsudo service nginx status</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405674-212067ca-f007-413e-87a0-0d8a796fffba.png\" alt=\"Untitled 10\"></p>\n<p>restart 명령어 아래 아무런 내용이 뜨지 않고 status 명령 이후 active (running)이라 나타나면 정상적으로 재시작 됐다는 뜻입니다.</p>\n<p>그럼 경로를 정상적으로 우회해 주는지 서버에 접속해서 확인합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405689-d6abac49-96e3-4d5c-a033-a3c00fc77b61.png\" alt=\"Untitled 11\"></p>\n<p>정상적으로 연동되어 포트번호(:3000) 없이도 Hello World가 출력되는 것을 확인할 수 있습니다.</p>\n<p>다음으로 실습할 내용은 MySQL로 생성한 DB 데이터를 불러와보도록 하겠습니다.</p>\n<h2 id=\"4-nginx-pm2로-api-활용하기\" style=\"position:relative;\"><a href=\"#4-nginx-pm2%EB%A1%9C-api-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"4 nginx pm2로 api 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. NginX, PM2로 API 활용하기</h2>\n<p>아래는 데이터를 불러오기 위해 필자가 작성한 아주 간단한 API 명세입니다.</p>\n<blockquote>\n<p>URL: /server</p>\n<p>METHOD: GET</p>\n</blockquote>\n<h3 id=\"request\" style=\"position:relative;\"><a href=\"#request\" aria-label=\"request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Request</strong></h3>\n<ul>\n<li><strong>Content-Type:</strong> <code class=\"language-text\">application/json; charset=utf-8</code></li>\n</ul>\n<h3 id=\"response\" style=\"position:relative;\"><a href=\"#response\" aria-label=\"response permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Response</strong></h3>\n<h3 id=\"success\" style=\"position:relative;\"><a href=\"#success\" aria-label=\"success permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Success</strong></h3>\n<ul>\n<li><strong>Status:</strong> <code class=\"language-text\">200</code></li>\n<li><strong>Content-Type:</strong> <code class=\"language-text\">application/json; charset=utf-8</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    {\n      \"id\": int,\n        \"name\":  \"string\",\n        \"other\": \"string\"\n    },\n\n    {\n        \"id\": 1,\n        \"name\":  \"테스트\",\n        \"other\": \"1번\"\n    },\n\n    {\n        \"id\": 2,\n        \"name\":  \"테스트\",\n        \"other\": \"2번\"\n    },\n\n    {\n        ...\n    },\n]</code></pre></div>\n<p>해당 경로로 요청을 보내면 아래 DB에 저장되어있는 데이터를 전부 불러옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405699-fc955a0d-f3a3-444b-88de-3850d6072733.png\" alt=\"Untitled 12\"></p>\n<p>그럼 API가 동작하는지 확인해보겠습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405704-cd9dd7db-c1aa-4916-986d-1181185dc386.png\" alt=\"Untitled 13\"></p>\n<p>동그라미 부분을 보면 해당 경로를 찾지 못해 무한 로딩중인 것을 확인할 수 있습니다.</p>\n<p>DB까지 거쳐서 정상적으로 데이터를 수신하려면 몇 가지 설정을 더 해줘야 조회가 가능합니다.</p>\n<p>먼저 AWS EC2 인스턴스로 접속한 후 스크롤을 내려 아래 보안 탭에서 보안 그룹 파일?을 클릭합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405707-0faeafb3-b20c-46d1-832f-fa8c619b3d5b.png\" alt=\"Untitled 14\"></p>\n<p>화면이 넘어가면 우측 하단에 인바운드 규칙 편집 버튼이 있습니다.</p>\n<p>해당 버튼을 클릭 후 아래와 같이 인바운드 규칙을 추가합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405708-f7cad073-c351-486b-8e0a-de8d234db51a.png\" alt=\"Untitled 15\"></p>\n<blockquote>\n<p>💡 MySQL은 3306 포트를 디폴트로 사용합니다.</p>\n</blockquote>\n<p>설정이 끝났다면 저장한 후에 EC2가 연동된 터미널로 이동한 후 아래 명령어로 설정창으로 이동합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo nano /etc/nginx/sites-available/default\n또는\nsudo nano /etc/nginx/sites-enabled/default</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405714-8d7e0f74-66ed-4a69-a5dd-f42c7693dc2e.png\" alt=\"Untitled 16\"></p>\n<blockquote>\n<p>💡 ~ : 레귤러 익스프레션(Regular expression) 매치를 수행합니다. 대소문자를 구분합니다. * : 레귤러 익스프레션을 대소문자 구분없이 매치하여 수행합니다. ^~ : 특정 스트링과 매치가 있으면 더 이상 다른 매치를 찾지 않고 매치를 수행합니다. = : 요청된 경로에 대해서 정확히 일치하는 매치를 수행합니다.</p>\n<p>⭐️ 매칭 처리 순서<br>\n- 정확한 스트링 매치(=)를 먼저 찾습니다. 없으면,<br>\n- 리터럴 스트링 매치(^<del>)를 찾습니다. 없으면 다음 리터럴 스트링 매치를 찾으면 가장 구체적인 매치를 저장해놓습니다.<br>\n- 다음으로 레귤러 익스프레션(</del>, ~*) 매치를 찾습니다.<br>\n- 마지막으로 매치를 찾지 못하면 가장 구체적으로 매치되는 리터럴 스트링 매치가 수행됩니다.</p>\n<p>TIP : 매치 경로에는 <strong>정규표현식</strong>이 들어갈 수 있습니다.</p>\n</blockquote>\n<p>location 경로부분에 ‘^~’를 추가하고 NginX와 서버를 재가동 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo service nginx restart\npm2 restart 0</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405717-c418bd8d-cb96-4886-b9ef-02a1b59b7926.png\" alt=\"Untitled 17\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186405721-6791ceb2-8cb6-4b14-b8c2-960e70ae79c1.png\" alt=\"Untitled 18\"></p>\n<p>해당 API 경로로 접속을 하니 정상적으로 DB 데이터 조회를 확인했습니다.</p>\n<p>이번 포스팅은 NginX가 무엇인지, NginX로 어떻게 Node 서버와 연동을 하는지 가장 기초적인 부분을 알아봤습니다.</p>\n<p>감사합니다 :D</p>","frontmatter":{"date":"February 10, 2022","title":"[Tech-Talk] NginX","categories":"테크톡","author":"hoonloper","emoji":"🎙"},"fields":{"slug":"/modern-agile-team/tech4NginX/"}},"prev":{"id":"ec90152f-afc8-5098-8cbf-34128318974c","html":"<iframe width=\"720\" height=\"420\" src=\"https://www.youtube.com/embed/mSxqiMPRPMQ\" title=\"테크톡🎤 MySQL - 정용훈(3기)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h4 id=\"이번-포스팅은-back-end-개발자라면-꼭-알아야-하는-dbms-중-하나인-mysql에-대해-아주-간략하게-알아보겠습니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88-%ED%8F%AC%EC%8A%A4%ED%8C%85%EC%9D%80-back-end-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EA%BC%AD-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-dbms-%EC%A4%91-%ED%95%98%EB%82%98%EC%9D%B8-mysql%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%84%EC%A3%BC-%EA%B0%84%EB%9E%B5%ED%95%98%EA%B2%8C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"이번 포스팅은 back end 개발자라면 꼭 알아야 하는 dbms 중 하나인 mysql에 대해 아주 간략하게 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번 포스팅은 Back-End 개발자라면 꼭 알아야 하는 DBMS 중 하나인 MySQL에 대해 아주 간략하게 알아보겠습니다.</h4>\n<h2 id=\"why\" style=\"position:relative;\"><a href=\"#why\" aria-label=\"why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHY?</h2>\n<p>우리는 왜 MySQL과 같은 DB를 배워야 할까요?</p>\n<p>정답은 간단합니다. 이 세상에 존재하는 모든 정보와 파일 및 자료들을 관리해야 하기 때문입니다.</p>\n<p>예를들어 모든 정보와 자료를 종이 문서로 보관한다면 어떤 일이 발생할까요? 아마 지구 전체가 종이로 덮일만큼 엄청나게 많은 종이 문서들이 생겨나겠죠.</p>\n<p>즉, 모든 데이터 정보 및 자료들의 편리한 유지보수와 접근성을 위해 개발된 게 바로 데이터베이스(DB)의 개념이고 이 DB를 잘 다룰 수 있도록 개발된 데이터베이스 관리 시스템(DBMS) 중 하나인 MySQL이 있습니다!</p>\n<p>이제 MySQL이 뭔지, 어떻게 사용해야 하는지 알아봅시다!</p>\n<h2 id=\"mysql이란\" style=\"position:relative;\"><a href=\"#mysql%EC%9D%B4%EB%9E%80\" aria-label=\"mysql이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL이란?</h2>\n<p>MySQL은 현재 세계에서 가장 많이 사용되는 DB 1위, 2위를 다투고 있는 1995년에 발표된 오픈 소스 관계형 데이터 베이스 관리 시스템 입니다.</p>\n<blockquote>\n<p>💡 오픈소스란? 누구든지 소스 코드를 보고 접근할 수 있으며, 라이센스 비용이 없기 때문에 상업용 DB에 비해 TCO가 낮습니다. 소스코드를 다운로드 하고 수정하여 비용 없이, 그리고 벤더 종속 없이 애플리케이션을 구동할 수 있지만 오픈소스 DB의 구축을 유지하고 보호하기 위한 책임은 사용자에게 있습니다.</p>\n</blockquote>\n<blockquote>\n<p>💡 관리형 데이터 베이스 관리 시스템(RDBMS)란?<br>\n기존의 데이터 저장 접근법으로 키-값 짝을 사용해 열과 행으로 이루어진 표의 형태로 정형 데이터를 저장하는 방식입니다.</p>\n<p>NoSQL(비관계형) DB 문서 데이터 스토어, 열-중심 데이터베이스, 키-값 스토리지 및 그래프 DB 등 대안적인 데이터 스토리지 아키텍처를 사용한 데이터 저장의 방식입니다. 비관계형 DB는 비정형 데이터를 다루는 데 적합합니다.</p>\n</blockquote>\n<p>제작사는 MySQL AB 회사인데 썬 마이크로 시스템즈에게 10억 달러에 인수되었고, 이후 2010년 오라클이 썬 마이크로 시스템즈를 72억달러에 인수하면서 같이 넘어가게 됩니다.</p>\n<p>이에 따라, MySQL의 실질적인 소유주는 오라클인데 현재 오라클은 자체 상용 DBMS인 오라클 데이터베이스를 소유하고 있고, 오픈 소스에 대해 호의적이지 않은데다 프로그램이 갈수록 복잡해지고 있어서 MySQL 사용자들 사이에서 불안감이 커지고 있습니다.</p>\n<p>그래서 MySQL을 모태로 MariaDB라는 DBMS를 제작했습니다.</p>\n<h2 id=\"mysql-점유율\" style=\"position:relative;\"><a href=\"#mysql-%EC%A0%90%EC%9C%A0%EC%9C%A8\" aria-label=\"mysql 점유율 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL 점유율</h2>\n<img width=\"999\" alt=\"111\" src=\"https://user-images.githubusercontent.com/78959175/186406854-2ff2a713-1e5b-4af0-a22f-6f264a04a042.png\">\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186407007-d5625c82-701a-4d6c-89be-9a272ab16e02.png\" alt=\"222\"></p>\n<p>위 사진과 같이 오라클, MS SQL, MySQL, PostgreSQL은 상위권을 유지하고 있습니다.</p>\n<p>오라클에 인수된 이후 MySQL에서 발을 빼는 기업들이 늘어났습니다. 구글과 오라클, 자바의 저작권 소송으로 저작권 분쟁 위협을 느낀 일부 기업들은 MySQL에서 빠지기 시작해서 MariaDB, PostgreSQL 등으로 넘어가고 있습니다. 하지만 오라클은 예상과 달리 MySQL에 대해서는 저작권 관련 분쟁을 일으키지 않아서 이런 불안감은 점차 사그라들었고, 2022년 기준 MySQL은 오라클 DB, MS SQL과 더불어 3대 DBMS라는 위상을 지키고 있습니다.</p>\n<h2 id=\"mysql의-장점\" style=\"position:relative;\"><a href=\"#mysql%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"mysql의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL의 장점</h2>\n<ol>\n<li>오픈 소스 라이센스를 따르기 때문에 무료로 사용 가능</li>\n<li>다양한 운영체제에서 사용할 수 있으며, 여러가지의 프로그래밍 언어를 지원</li>\n<li>크기가 큰 데이터 집합도 아주 빠르고 효과적으로 처리할 수 있음</li>\n<li>널리 알려진 표준 SQL 형식을 사용</li>\n<li>MySQL 응용 프로그램을 사용자의 용도에 맞게 수정할 수 있음</li>\n</ol>","frontmatter":{"date":"February 24, 2022","title":"[Tech-Talk] MySQL","categories":"테크톡","author":"hoonloper","emoji":"🎙"},"fields":{"slug":"/modern-agile-team/tech5Mysql/"}},"site":{"siteMetadata":{"siteUrl":"https://hoonloper.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/everytime/","nextSlug":"/modern-agile-team/tech4NginX/","prevSlug":"/modern-agile-team/tech5Mysql/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}