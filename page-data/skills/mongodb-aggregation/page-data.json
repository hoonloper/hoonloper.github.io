{"componentChunkName":"component---src-templates-blog-template-js","path":"/skills/mongodb-aggregation/","result":{"data":{"cur":{"id":"e103338a-256a-5c3d-8b1b-74048c7170cb","html":"<h2 id=\"aggregation\" style=\"position:relative;\"><a href=\"#aggregation\" aria-label=\"aggregation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aggregation???</h2>\n<blockquote>\n<p>몽고DB의 Aggregation은 <strong>데이터 처리 파이프라인 개념</strong>을 모델로 합니다.</p>\n</blockquote>\n<p>어그리게이션은 다중 스테이지 파이프라인을 사용할 수 있는데 원하는 데이터 형식 혹은 값들을 필터해서 출력할 수 있습니다.</p>\n<p>어그리게이션 작업은 데이터를 처리하여 계산된 결과를 반환합니다. 어그리게이션은 여러 도큐먼트의 값을 그룹화하고, 데이터에 다양한 작업을 수행한 후 단일 결과를 반환할 수 있습니다. MongoDB는 세 가지 어그리게이션을 제공합니다.</p>\n<ul>\n<li>Aggregation Pipeline</li>\n<li>Single Purpose Aggregation Operations</li>\n<li>Map-reduce</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Example</span>\ndb<span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">.</span><span class=\"token function\">aggregate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$match</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token string\">'A'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$group</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token string\">'$cust_id'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">total</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$sum</span><span class=\"token operator\">:</span> <span class=\"token string\">'$amount'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드와 같이 첫번째 스테이지는 <code class=\"language-text\">$match</code>이고 두번째 스테이지는 <code class=\"language-text\">$group</code>입니다.</p>\n<p>매치는 조건과 같은 역할을 수행하며 그룹은 그룹화를 통해 유니크한 값들의 합을 계산하거나 원하는 동작을 수애하게 할 수 있습니다.</p>\n<p>이 외에도 다양한 스테이지들이 있으며, 스테이지의 순서는 아래와 같습니다.</p>\n<blockquote>\n<p>pipeline 순서</p>\n<p>collection > $project > $match > $group > $sort > $skip > $limit > $unwind > $out</p>\n</blockquote>\n<p>$out, $merge, $geoNear 를 제외한 스테이지는 파이프라인에 여러 번 사용될 수 있습니다.</p>\n<h3 id=\"어그리게이션-파이프라인-제약사항\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EA%B7%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%EC%85%98-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%A0%9C%EC%95%BD%EC%82%AC%ED%95%AD\" aria-label=\"어그리게이션 파이프라인 제약사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어그리게이션 파이프라인 제약사항</h3>\n<ul>\n<li>결과 크기 제한\n<ul>\n<li>반환되는 도큐먼트 크기는 16 메가바이트로 제한됩니다.</li>\n<li>이 제한은 마지막으로 반환되는 도큐먼트에만 적용되고, 파이프라인 안에서는 더 클 수 있습니다.</li>\n</ul>\n</li>\n<li>메모리 제한\n<ul>\n<li>스테이지는 100 메가바이트 이상의 메모리를 쓸 수 없습니다.</li>\n<li>그보다 큰 데이터를 처리하려면 allowDiskUse 옵션을 사용해 데이터를 임시 파일에 쓸 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"어그리게이션-파이프라인-최적화---몽고db-파이프라인-최적화-공식문서\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EA%B7%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%EC%85%98-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%B5%9C%EC%A0%81%ED%99%94---%EB%AA%BD%EA%B3%A0db-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%B5%9C%EC%A0%81%ED%99%94-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C\" aria-label=\"어그리게이션 파이프라인 최적화   몽고db 파이프라인 최적화 공식문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어그리게이션 파이프라인 최적화 - <a href=\"https://www.mongodb.com/docs/manual/core/aggregation-pipeline-optimization/\">몽고DB 파이프라인 최적화 공식문서</a></h3>\n<p>최적화 단계를 거쳐 성능이 향상됩니다. explain 최적화된 결과를 볼 수 있습니다.</p>\n<p><a href=\"https://www.mongodb.com/docs/manual/aggregation/\">몽고DB Aggregation 공식 문서 보러가기</a></p>","excerpt":"Aggregation??? 몽고DB의 Aggregation은 데이터 처리 파이프라인 개념을 모델로 합니다. 어그리게이션은 다중 스테이지 파이프라인을 사용할 수 있는데 원하는 데이터 형식 혹은 값들을 필터해서 출력할 수 있습니다. 어그리게이션 작업은 데이터를 처리하여 계산된 결과를 반환합니다. 어그리게이션은 여러 도큐먼트의 값을 그룹화하고, 데이터에 다양한 작업을 수행한 후 단일 결과를 반환할 수 있습니다. MongoDB는 세 가지 어그리게이션을 제공합니다. Aggregation Pipeline Single Purpose Aggregation Operations Map-reduce 위 코드와 같이 첫번째 스테이지는 이고 두번째 스테이지는 입니다. 매치는 조건과 같은 역할을 수행하며 그룹은 그룹화를 통해 유니크한 값들의 합을 계산하거나 원하는 동작을 수애하게 할 수 있습니다. 이 외에도 다양한 스테이지들이 있으며, 스테이지의 순서는 아래와 같습니다. pipeline 순서 collect…","frontmatter":{"date":"October 18, 2022","title":"[Skill] MongoDB Aggregation이란?","categories":"SKILL","author":"hoonloper","emoji":"🛠"},"fields":{"slug":"/skills/mongodb-aggregation/"}},"next":{"id":"e8154d56-dd68-5fb5-84bb-370a3592768a","html":"<p>안녕하세요! 이번 포스트는 JavaScript와 TypeScript 차이에 대해 작성하려 합니다!</p>\n<h2 id=\"javascript--typescript\" style=\"position:relative;\"><a href=\"#javascript--typescript\" aria-label=\"javascript  typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript &#x26; TypeScript</h2>\n<h3 id=\"javascript\" style=\"position:relative;\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript</h3>\n<ul>\n<li>자바스크립트는 ‘웹페이지에 생동감을 불어넣기 위해’ 만들어진 <strong>동적인</strong> 프로그래밍 언어입니다.</li>\n<li>동적인 언어에 맞게 암묵적 형변환 현상이 있어 보다 개발을 쉽게 할 수 있는 언어입니다.</li>\n</ul>\n<h3 id=\"typescript\" style=\"position:relative;\"><a href=\"#typescript\" aria-label=\"typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript</h3>\n<ul>\n<li>타입스크립트는 자바스크립트 언어에 타입을 부여한 언어입니다.</li>\n<li>동적인 자바스크립트를 정적으로 바꿔줘 예상치 못한 에러를 방지할 수 있습니다.</li>\n<li>런타임에서 발생할 에러를 컴파일 단계에서 미리 잡아줘 에러 예방이 가능합니다.</li>\n<li>타입스크립트는 브라우저에서 실행하려면 자바스크립트로 바꿔주는 <strong>컴파일</strong> 과정을 거칩니다.</li>\n</ul>\n<h2 id=\"typescript를-왜-사용하는가\" style=\"position:relative;\"><a href=\"#typescript%EB%A5%BC-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"typescript를 왜 사용하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript를 왜 사용하는가?!</h2>\n<p>제가 지금까지 개발하면서 느꼈던 점 위주로 작성하겠습니다.</p>\n<p>장점</p>\n<ol>\n<li>데이터 유효성 검사로 타입 에러를 최소화 할 수 있다.</li>\n<li>내가 아닌 다른 개발자가 코드를 봤을 때 타입이 명시적으로 작성되어 있어 코드를 이해하기 편하다.</li>\n<li>타입이 달라 발생하는 에러(DB Type과 불일치 등)들을 사전에 방지할 수 있다.</li>\n<li>기본적인 Number, String 외에도 다양한 타입들을 지원해 적재적소에 알맞는 타입을 지정할 수 있다.</li>\n</ol>\n<p>단점</p>\n<ol>\n<li>컴파일이라는 과정이 있기에 비교적 무겁게 돌아간다.(큰 차이는 없을 수도..?)</li>\n<li>개발하며 가장 많이 사용되는 변수나 함수 등 하나하나 타입을 지정해야 해서 귀찮음을 유발한다.</li>\n<li>타입이 많아지면 관리하기가 어려워진다.</li>\n<li>자바스크립트의 동적인 특징과 타입스크립트의 정적인 특징이 만나 숙련도가 낮은 개발자는 코드를 이해하기 힘들다.</li>\n</ol>\n<p>등이 있겠습니다.</p>\n<p>특히 단점의 2번.. 타입스크립트를 사용하는 모든 개발자들을 괴롭히는 주 원인인데요. 이러한 단점에도 불구하고 장점이 주는 이점이 너무나도 강력해 타입스크립트를 사용하는 개발자들이 많은 것으로 생각됩니다!(제 생각..)</p>\n<p>계좌 이체나 결제 등 실제 돈이 오고가는 흐름에서 데이터의 타입 이슈가 발생한다면..? 생각만해도 끔찍합니다. 사실 모든? 개발자들이 고려하는 부분이라 생각해 조치를 취해뒀겠지만 혹시나 하는 위험 요소들이 존재합니다. 이런 혹시나 하는 위험 요소들을 100% 커버는 하지 못할지라도 99%에 가깝게 커버할 수 있다고 생각해요.</p>\n<p>간단 요약</p>\n<ul>\n<li>JS보다 TS가 개발에 있어 안정적이다.</li>\n<li>TS는 JS와는 다르게 타입을 지정해 명시적인 코드, 즉 클린한 코드를 작성할 수 있게 도와준다.</li>\n<li>TS는 내 취향이다.</li>\n</ul>\n<p>읽어주셔서 감사합니다 :)</p>","frontmatter":{"date":"September 19, 2022","title":"[CS] JavaScript & TypeScript","categories":"CS","author":"hoonloper","emoji":"💾"},"fields":{"slug":"/cs/js-vs-ts/"}},"prev":{"id":"f602a153-3a23-5e5d-8548-b8925fc146cb","html":"<blockquote>\n<p>행사 관련해서 제가 직접 촬영한 사진이 없네요 ㅠㅠ 참고 바라며 마지막에 행사 상품 사진이라도 첨부할게요!</p>\n</blockquote>\n<p><a href=\"https://youtu.be/VH1GTGIMHQw\">NestJS Korea Meetup 영상 다시보기🔥</a></p>\n<h1 id=\"nestjs-코리아-밋업에-참여하다\" style=\"position:relative;\"><a href=\"#nestjs-%EC%BD%94%EB%A6%AC%EC%95%84-%EB%B0%8B%EC%97%85%EC%97%90-%EC%B0%B8%EC%97%AC%ED%95%98%EB%8B%A4\" aria-label=\"nestjs 코리아 밋업에 참여하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS 코리아 밋업에 참여하다.</h1>\n<p>오늘은 강남에 있는 팀 스파르타에서 진행된 NestJS 밋업에 참여했습니다!</p>\n<p>개발자로서 개발 관련한 행사에 참여하는 것은 이번이 처음이라 매우 떨렸네요 😅</p>\n<p>지난번에 인프콘 행사에 신청했지만 아쉽게 당첨되지는 못해서 참여 못한 기억이 스물스물 올라옵니다 😂</p>\n<p>행사 진행 일시와 장소는 아래와 같아요!</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token list punctuation\">-</span> 일시: 2022.10.20(목) 오후 7시 ~ 10시(3시간)\n<span class=\"token list punctuation\">-</span> 장소: 서울특별시 강남구 테헤란로 44길 8, 12층 (팀스파르타)</code></pre></div>\n<h3 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h3>\n<ul>\n<li><strong>19:00 ~ 19:10</strong>\n<ul>\n<li>오프닝 인사</li>\n</ul>\n</li>\n<li><strong>19:10 ~ 19:40</strong>\n<ul>\n<li>남정호 - Nestia + TypeScript-JSON</li>\n<li>Automatic SDK generator with 초고속 JSON 상하차(시대가 어느 때인데 아직도 swagger 하세요?)</li>\n</ul>\n</li>\n<li><strong>19:40 ~ 20:10</strong>\n<ul>\n<li>조헌일 - NestJS에서 서버리스 트랜스코딩 파이프라인 만들기</li>\n<li>NestJS에서 빠르고 쉽게 트랜스코딩 파이프라인을 구축하는 법. 그 과정에서 각 인프라와 서비스를 사용한 방법 공유</li>\n</ul>\n</li>\n<li><strong>20:10 ~ 20:40</strong>\n<ul>\n<li>김인성 - NestJS에서 AOP 우아하게 적용하기</li>\n<li>NestJS provider 탐색을 통해 run time에 initialize된 instance를 decorator로 활용하여, controller가 아닌 각 service에 AOP개념을 우아하게 적용하는 방법 알아보기</li>\n</ul>\n</li>\n<li><strong>20:40 ~ 21:10</strong>\n<ul>\n<li>이경석 - NestJS 기반의 테스트 작성방법</li>\n<li>NestJS에 종속적인 테스트와 독립적인 테스트를 구분해서 작성하는 방법</li>\n</ul>\n</li>\n<li><strong>21:10 ~ 21:40</strong>\n<ul>\n<li>차진혁 - NestJS lifecycle과 interceptor</li>\n<li>NestJS에서 rxjs를 이용한 interceptor 구현과 lifecycle 측면에서의 interceptor 바라보기</li>\n</ul>\n</li>\n<li><strong>21:40 ~ 22:10</strong>\n<ul>\n<li>패널토크</li>\n<li>연사자들과 함께 네트워킹 &#x26; 굿즈 전달</li>\n</ul>\n</li>\n</ul>\n<p>Assemble 행사 스케쥴은 위와 같아요! 여기서 저는 <strong>남정호 님의 Nestia + TypeScript-JSON</strong> 발표와 <strong>김인성 님의 NestJS에서 AOP 우아하게 적용하기</strong> 발표, <strong>차진혁 님의 NestJS lifesycle과 interceptor</strong> 발표가 가장 기대됐어요.</p>\n<hr>\n<h3 id=\"남정호님-발표-소감\" style=\"position:relative;\"><a href=\"#%EB%82%A8%EC%A0%95%ED%98%B8%EB%8B%98-%EB%B0%9C%ED%91%9C-%EC%86%8C%EA%B0%90\" aria-label=\"남정호님 발표 소감 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>남정호님 발표 소감</h3>\n<p>우선 첫번째로 남정호 님의 발표를 보고 난 후 소감이에요.</p>\n<p>남정호님은 samchon이란 개발 이름을 사용하는 이름 있는 개발자분이십니다! (<a href=\"https://github.com/samchon\">https://github.com/samchon</a>)</p>\n<p>평소 오픈톡방에서 nestia라는 라이브러리를 지속적으로 홍보하시고 무엇보다 Validation 부분에서 압도적인 속도를 보여준다는 내용이 인상깊었어요.</p>\n<p>nestia는 SDK(SoftwareDevelopmentKit)Generator, SwaggerGenerator 역할을 수행해요.</p>\n<p>아래와 같은 특징이 있습니다.</p>\n<ul>\n<li>인터페이스를 DTO로 사용 가능</li>\n<li>자동 Validation 지원</li>\n<li>Class-Validator + Transformer 보다 최대 2,000배 빠름</li>\n</ul>\n<p>개발자인 저는 무엇보다 2,000배 빠른 특징에 시선이 가더라구요. 이런 속도 차이가 가능한 것은 TypeScript-JSON을 활용한 것인데요.</p>\n<p>코드를 컴파일러 수준에서 분석하여 최적의 런타임 코드를 만들어주는 AOT(Ahead Of Time) 컴파일을 사용한다고 합니다!</p>\n<p><del>사실 전 무슨말인지 하나도 모르겠더라구요 😭</del></p>\n<p>자세한 내용이 궁금하시면 제일 상단에 링크를 봐주세요!</p>\n<p>느낀점: 어떻게 개발되었는지와 사용 방법은 아직까지 잘 모르겠지만 부족함을 느끼고 공부해야겠다는 다짐이 생겼습니다.</p>\n<hr>\n<h3 id=\"조헌일님-발표-소감\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%ED%97%8C%EC%9D%BC%EB%8B%98-%EB%B0%9C%ED%91%9C-%EC%86%8C%EA%B0%90\" aria-label=\"조헌일님 발표 소감 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조헌일님 발표 소감</h3>\n<p>NestJS 기반 서버리스 트랜스코딩 파이프라인에 대한 발표 내용입니다.</p>\n<p>팀 스파르타에 일원으로 개발자로 근무중이신 조헌일님의 발표였는데요.</p>\n<p>발표의 핵심 내용은 VOD 트랜스코딩 파이프라인을 설계하게 된 과정이었습니다.</p>\n<p>느낀점: VOD 관련 서비스를 하는 곳으로 이직을 하게 된다면 참고할 자료로 너무나 좋은 발표였으나 그 외에는 흥미가 가진 않았어요.</p>\n<hr>\n<h3 id=\"김인성님-발표-소감\" style=\"position:relative;\"><a href=\"#%EA%B9%80%EC%9D%B8%EC%84%B1%EB%8B%98-%EB%B0%9C%ED%91%9C-%EC%86%8C%EA%B0%90\" aria-label=\"김인성님 발표 소감 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>김인성님 발표 소감</h3>\n<p><strong>김인성님의 NestJS에서 AOP 우아하게 적용하기</strong>는 NestJS를 개발하며 AOP에 관심이 생긴 저에게 정말 많은 흥미를 준 발표 제목이었습니다.</p>\n<p>Viva Republica (Toss) - Node.js Developer로 근무를 하시기에 발표를 바라보는 저의 눈이 더욱 반짝였어요!</p>\n<p>내용은.. 너무나 어려웠기에 제 능력으로 이 포스트에 담을 수 없기에 소감 정도로만 깔끔하게 마무리하겠습니다!</p>\n<p>느낀점: 메타데이터를 활용해서 뭐 어쩌구 저쩌구.. 깊게 더 깊게 파고든다.₩!!@~의 느낌이라 제가 나중에 더 능력있는 개발자로 성장하게 된다면 다시한번 발표를 참고할만한 좋은 내용이었어요!</p>\n<hr>\n<h3 id=\"이경석님-발표-소감\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%BD%EC%84%9D%EB%8B%98-%EB%B0%9C%ED%91%9C-%EC%86%8C%EA%B0%90\" aria-label=\"이경석님 발표 소감 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이경석님 발표 소감</h3>\n<p>겜퍼의 개발자로 근무중이신 이경석님의 발표 소감입니다.</p>\n<p>테스트 코드 작성 방법에 대해 발표를 하셨는데 제가 생각했던 테스트와 많이 달라서 신선했습니다.</p>\n<p>기존 도메인 모델 내에 종속되어있는 Nest와 TypeORM을 역전환해 Nest와 TypeORM이 도메인 모델을 품고있는 형태로 전환하는 발표였는데 발표를 듣는 동안 ??????가 머리속을 가득 채웠죠.</p>\n<p>느낀점: 테스트에 소요되는 시간을 절약한다는 접근은 저도 매우 동의하나 저렇게까지 해야하나에 대한 의문도 같이 들었고.. 흠 막 끌리는 내용은 아니었지만 시야를 넓히기에는 좋은 발표였습니다!</p>\n<hr>\n<h3 id=\"차진혁님-발표-소감\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%A7%84%ED%98%81%EB%8B%98-%EB%B0%9C%ED%91%9C-%EC%86%8C%EA%B0%90\" aria-label=\"차진혁님 발표 소감 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차진혁님 발표 소감</h3>\n<p>마지막으로 Superb AI에서 근무중이신 차진혁님의 발표 소감입니다.</p>\n<p>RxJS를 사용하는 Interceptor 단에서 RxJS를 활용해 성능 개선을 하는 발표였어요.</p>\n<p>느낀점: 기대하고 있던 내용과는 많이 달랐지만 인터셉터에서 어떤 기술이 적용되는지와 어떻게 활용하면 좋을지에 대해 감각을 기르기 좋은 발표였습니다.</p>\n<hr>\n<p>이렇게 소감에 대해 정리해봤는데요. 생각보다 내용이 짧아서 저도 당황했어요 😅</p>\n<p><strong>행사에 참여해서 받은 굿즈 사진 올리면서 이번 포스팅을 마무리하겠습니다!</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/199618426-9f87daca-6f0d-4620-928a-d7a1c7895adf.jpeg\" alt=\"같이 참관한 지인들과!\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/199618421-08755144-29b6-4c86-95da-7eecc93ec13f.jpeg\" alt=\"작업할 때 입은 굿즈\"></p>","frontmatter":{"date":"October 20, 2022","title":"[EVENT] NestJS Assemble! - 2번째 Nest 코리아 밋업 후기","categories":"행사","author":"hoonloper","emoji":"🎊"},"fields":{"slug":"/event/nestjs2/"}},"site":{"siteMetadata":{"siteUrl":"https://hoonloper.com","comments":{"utterances":{"repo":"hoonloper/hoonloper.github.io"}}}}},"pageContext":{"slug":"/skills/mongodb-aggregation/","nextSlug":"/cs/js-vs-ts/","prevSlug":"/event/nestjs2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}