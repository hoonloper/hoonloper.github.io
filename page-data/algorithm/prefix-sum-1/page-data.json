{"componentChunkName":"component---src-templates-blog-template-js","path":"/algorithm/prefix-sum-1/","result":{"data":{"cur":{"id":"b8a73d61-3b20-56e4-9eb7-9d95034aea77","html":"<p>누적합(Prefix Sum) 알고리즘을 활용하는 백준 문제를 풀어봤습니다.</p>\n<p>저는 누적합 알고리즘을 처음 접했기에 알고리즘에 대한 설명을 들어도 이해가 어려워서 따로 정리한 포스트입니다!</p>\n<blockquote>\n<p>누적합이란 수열 An에 대해서 각 인덱스까지의 구간의 합을 구하는 것을 누적합이라 합니다.</p>\n</blockquote>\n<p>그럼 누적합은 어떻게 구할 수 있을까요?</p>\n<p>배열의 [A ~ B] 범위의 구간 합을 구하고자 할 때, 누적합 배열을 구한 후 B까지의 누적합에서 A-1까지의 누적합을 빼주면 구간의 합을 구할 수 있습니다.</p>\n<p><strong>처음 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 입력 생략</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">+</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> psum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    psum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> psum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>초기 문제를 분석하고 풀이를 할 때 이중 for문을 사용해 구간의 합을 구했습니다. 하지만 이 풀이로 제출을 했더니 시간 초과가 나오더군요. 그래서 Prefix Sum 알고리즘을 찾게 되었고 시간 초과를 피할 수 있었습니다.</p>\n<p><strong>정답 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">rl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">+</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> psum <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    psum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>psum<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> psum<span class=\"token punctuation\">[</span>start <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드설명\n<code class=\"language-text\">const psum = Array.from({ length: N + 1 }, () => 0);</code> prefix sum 배열을 새로 생성하는데 주어진 N에서 1을 더해주는 이유는 인덱스로 접근하기 위함입니다.\n<code class=\"language-text\">// psum : [0, 0, 0, 0, 0, 0]</code></p>\n<p><code class=\"language-text\">for (let i = 0; i &lt; N; i++) { psum[i + 1] = psum[i] + arr[i]; }</code> 주어진 배열 요소들의 누적합을 psum 인덱스에 저장합니다.</p>\n<p><code class=\"language-text\">for (const [start, end] of other) { answer.push(psum[end] - psum[start - 1]); }</code> 주어진 시작 인덱스와 끝 인덱스를 공식에 맞게 구한 후 정답 배열에 넣습니다.</p>\n<blockquote>\n<p>공식 prefixSum의 End index - prefixSum의 Start index - 1</p>\n</blockquote>\n<p>이후 정답 배열의 로그를 찍어보면 정상적으로 정답을 확인할 수 있고 시간 초과 또한 면할 수 있었습니다. 아주 기초적인 문제이지만 많이 돌아온만큼 응용 문제들을 마주쳐도 흔들리지 않는 탄탄한 기본기를 갖춰야 됨을 느꼈습니다.</p>","excerpt":"누적합(Prefix Sum) 알고리즘을 활용하는 백준 문제를 풀어봤습니다. 저는 누적합 알고리즘을 처음 접했기에 알고리즘에 대한 설명을 들어도 이해가 어려워서 따로 정리한 포스트입니다! 누적합이란 수열 An에 대해서 각 인덱스까지의 구간의 합을 구하는 것을 누적합이라 합니다. 그럼 누적합은 어떻게 구할 수 있을까요? 배열의 [A ~ B] 범위의 구간 합을 구하고자 할 때, 누적합 배열을 구한 후 B까지의 누적합에서 A-1까지의 누적합을 빼주면 구간의 합을 구할 수 있습니다. 처음 코드 초기 문제를 분석하고 풀이를 할 때 이중 for문을 사용해 구간의 합을 구했습니다. 하지만 이 풀이로 제출을 했더니 시간 초과가 나오더군요. 그래서 Prefix Sum 알고리즘을 찾게 되었고 시간 초과를 피할 수 있었습니다. 정답 코드 코드설명\n prefix sum 배열을 새로 생성하는데 주어진 N에서 1을 더해주는 이유는 인덱스로 접근하기 위함입니다.\n  주어진 배열 요소들의 누적합을 psum 인덱…","frontmatter":{"date":"December 17, 2022","title":"[알고리즘] 구간 합 구하기4(백준11659) - 누적합(Prefix Sum)","categories":"알고리즘","author":"hoonloper","emoji":"🧠"},"fields":{"slug":"/algorithm/prefix-sum-1/"}},"next":{"id":"4d784df7-196b-5f6e-83d5-0262530b96f9","html":"<p>안녕하세요. 이번에는 코어 자바스크립트 서적 정독을 기념한 짧은 회고를 작성해 보려 합니다.</p>\n<blockquote>\n<p>오랜만에 책을 정독하느라 힘이드네요 😅</p>\n</blockquote>\n<p>처음 서적을 읽게 된 계기는 자바스크립트를 주 언어로 사용하는 개발자가 자바스크립트에 대해 제대로 알지 못한다면 정말 개발자라 할 수 있을까에 대한 의문에서 시작됐습니다. 항상 성장을 위해 달려가지만 기본기가 다져져있지 않다면 성장의 한계점은 어느순간 다가올 것이라는 생각에 기본기 복습을 위한 정독이었습니다.</p>\n<p>코어 자바스크립트를 정독하면서 알고 있던 자바스크립트 지식은 단단해짐을 느꼈고 제대로 알지 못하거나 모르는 지식들을 배울 때는 뿌듯함과 성장함을 느꼈습니다. 사실 코어 자바스크립트 서적을 다 읽고나니 전문가가 아닌 초보자들에게 길잡이를 해주려는 의도로 만든 서적임을 많이 느껴 제대로 자바스크립트 기본기를 다지려면 모던 자바스크립트 딥다이브를 정독해야 함을 다시금 떠올렸습니다..</p>\n<p>저는 초보자이기에 초보자 시점에서도 쉽게 읽을 수 있는 서적이라 편했고 자바스크립트 언어로 개발을 시작하려는 분들도 보다 가벼운 마음으로 한스푼 깊게 파볼 수 있는 좋은 서적인 것 같습니다.</p>\n<p>이번 교재를 기반으로 모던 자바스크립트 딥 다이브를 정독하려 하는데 1,000 페이지가 넘는 책이다보니 아마 정독이 끝날 때쯤 얻은 꿀팁들을 정리하지 않을까 라고 조심스레 예상해봅니다.</p>\n<p>긴 글 읽어주셔서 감사하며 좋은 하루 보내세요 🙇</p>","frontmatter":{"date":"December 11, 2022","title":"[회고] Core-Javascript 정독 회고","categories":"회고","author":"hoonloper","emoji":"👣"},"fields":{"slug":"/retrospect/core-javascript/"}},"prev":{"id":"1eb987b0-fac9-5318-862d-7ee4799e69e5","html":"<p>지난 구간합구하기4 문제보다 어려운 수열 문제 풀어봤습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 입력 생략</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 구간합을 저장할 sum과 인덱스를 지정할 count 변수를 선언합니다.</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 초기 0부터 K-1 번째 요소까지의 구간합을 구합니다.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 최대값을 저장할 max를 선언하고 초기 sum을 할당합니다.</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// K번째 요소부터 N-1번째 요소까지 반복합니다.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// sum에 K번째 요소를 더합니다.</span>\n    sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 첫 반복이면 sum에 0번째 요소를 빼준 뒤 다음 인덱스를 칭하도록 증가연산자를 사용합니다.</span>\n    sum <span class=\"token operator\">-=</span> arr<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 저장되어있는 max값과 다음 구간합의 결과를 비교하고 더 큰 값을 max에 저장합니다.</span>\n    max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 최종 최대값을 출력합니다.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번 문제의 핵심은 마지막 for문에 있다고 생각하는데요. 인덱스를 활용해 두번 반복을 방지하고 O(N)의 시간 복잡도로 처리가 가능합니다.</p>\n<p>단순 반복문을 사용하는 것이 아닌 인덱스와 같이 사고력이 필요한 부분들을 단련해 코딩 테스트 능력을 키워야겠습니다..😭</p>","frontmatter":{"date":"December 18, 2022","title":"[알고리즘] 수열(백준2559) - 누적합(Prefix Sum)","categories":"알고리즘","author":"hoonloper","emoji":"🧠"},"fields":{"slug":"/algorithm/prefix-sum-2/"}},"site":{"siteMetadata":{"siteUrl":"https://hoonloper.com","comments":{"utterances":{"repo":"hoonloper/hoonloper.github.io"}}}}},"pageContext":{"slug":"/algorithm/prefix-sum-1/","nextSlug":"/retrospect/core-javascript/","prevSlug":"/algorithm/prefix-sum-2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}