{"componentChunkName":"component---src-templates-blog-template-js","path":"/algorithm/coding-test-1/","result":{"data":{"cur":{"id":"49236876-79ac-5c44-9072-375651d526d0","html":"<blockquote>\n<p>프로그래머스 2단계 문제인 타겟 넘버 풀이입니다!</p>\n</blockquote>\n<p><strong>Description</strong>\nn개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3</code></pre></div>\n<p>사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.</p>\n<p>제한사항</p>\n<ul>\n<li>주어지는 숫자의 개수는 2개 이상 20개 이하입니다.</li>\n<li>각 숫자는 1 이상 50 이하인 자연수입니다.</li>\n<li>타겟 넘버는 1 이상 1000 이하인 자연수입니다.</li>\n</ul>\n<p>numbers | target | return\n[1, 1, 1, 1, 1] | 3 | 5\n[4, 1, 2, 1] | 4 | 2</p>\n<h3 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DFS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cur<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> cur1 <span class=\"token operator\">=</span> cur <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> cur2 <span class=\"token operator\">=</span> cur <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      answer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>cur1<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      answer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>cur2<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 DFS 함수부터 뜯어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>조건문에서 numbers 배열의 모든 요소를 연산해야 하기 때문에 numbers의 총 길이가 되면 걸리도록 설정했습니다. 이후 현재 값과 목표값이 일치하면 1을 반환하도록 했습니다.</p>\n<blockquote>\n<p>numbers.length를 함수 외부 변수에 할당해서 조건에 넣어주면 무의미하게 반복되는 .length 메소드 연산을 피할 수 있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cur1 <span class=\"token operator\">=</span> cur <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cur2 <span class=\"token operator\">=</span> cur <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>cur1<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>cur2<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음은 else 부분입니다.</p>\n<p>매개변수로 받은 cur에서 더한값과 뺀 값을 계산해서 다음 탐색을 이어갑니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nanswer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanswer <span class=\"token operator\">+=</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 처음 DFS를 호출하는 코드입니다.</p>\n<p>numbers의 첫 요소를 cur, 그리고 1을 x에 넣어줍니다. (x는 index 역할)</p>\n<p>첫 번째 요소가 +일 경우와 -일 경우가 있어 각각 호출해주고 누적해주면 정상적으로 결과를 확인할 수 있습니다.</p>\n<p>프로그래머스 2단계 DFS 문제를 풀고 나름 뿌듯해하며 다른 사람들이 푼 코드를 염탐을 시도했는데 또 한번 현타가 와버렸습니다..😭</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getAnswer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getAnswer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getAnswer</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getAnswer</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>군더더기 없는 이 해답을 보고있자니 정말 놀랍더군요. 너무나 깔끔했습니다. 저같은 코린이들도 한번에 이해할 수 있는 엄청난 가독성을 지녀 많이 배웠습니다.</p>\n<p>더 분발하도록…🔥</p>","excerpt":"프로그래머스 2단계 문제인 타겟 넘버 풀이입니다! Description\nn개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다. 사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요. 제한사항 주어지는 숫자의 개수는 2개 이상 20개 이하입니다. 각 숫자는 1 이상 50 이하인 자연수입니다. 타겟 넘버는 1 이상 1000 이하인 자연수입니다. numbers | target | return\n[1, 1, 1, 1, 1] | 3 | 5\n[4, 1, 2, 1] | 4 | 2 풀이 먼저 DFS 함수부터 뜯어보겠습니다. 조건문에서 numbers 배열의 모든 요소를 연산해야 하기 …","frontmatter":{"date":"November 12, 2022","title":"[프로그래머스] 타겟 넘버 - DFS","categories":"코딩테스트","author":"hoonloper","emoji":"🧠"},"fields":{"slug":"/algorithm/coding-test-1/"}},"next":{"id":"fe776cf8-40ec-5493-8447-d0b3c483b0cc","html":"<p>코어 자바스크립트 책을 정독하면서 얻은 팁들을 소소하게 정리하는 게시글입니다.</p>\n<h3 id=\"데이터-타입의-종류\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"데이터 타입의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 타입의 종류</h3>\n<p>자바스크립트의 데이터 타입에는 크게 두 가지가 있는데 <strong>기본형</strong>과 <strong>참조형</strong>입니다.</p>\n<p>기본형</p>\n<ul>\n<li>number(숫자)</li>\n<li>string(문자열)</li>\n<li>boolean(불리언)</li>\n<li>null</li>\n<li>undefined</li>\n<li>symbol(심볼)</li>\n</ul>\n<p>참조형</p>\n<ul>\n<li>object(객체)\n<ul>\n<li>Map</li>\n<li>WeakMap</li>\n<li>Set</li>\n<li>WeakSet</li>\n</ul>\n</li>\n<li>array(배열)</li>\n<li>function(함수)</li>\n<li>date(날짜)</li>\n<li>regexp(정규표현식)</li>\n</ul>\n<p>기본형과 참조형의 차이점은 무엇일까요?</p>\n<p>기본형은 값이 담긴 주솟값을 바로 복제하는 반면 참조형은 값이 담긴 주솟값들로 이루어진 묶음을 가리키는 주솟값을 복제한다는 점입니다.</p>\n<p>그리고 기본형은 불변성을 띕니다.\n한번 만들어진 값은 가비지 컬렉팅을 당하지 않는 한 영원히 변하지 않습니다.</p>\n<h3 id=\"메모리와-데이터\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-label=\"메모리와 데이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리와 데이터</h3>\n<p>자바스크립트는 메모리 용량이 과거보다 월등히 커진 시점에서 등장했기에 다른 저급 언어들과 상대적으로 메모리 관리에 대한 압박에서 자유로워졌습니다. 그래서 메모리 공간을 좀 더 넉넉하게 할당했습니다.</p>\n<p>숫자의 경우 정수형, 부동소수형을 구분하지 않고 64비트, 즉 8바이트를 확보합니다. 그래서 개발자가 형변환에 대한 걱정을 훨씬 줄였습니다.</p>\n<h3 id=\"변수와-식별자\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%99%80-%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"변수와 식별자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수와 식별자</h3>\n<p>변수 - 변할 수 있는 데이터\n식별자 - 어떤 데이터를 식별하는 데 사용하는 이름, 변수명</p>\n<h3 id=\"얕은-복사와-깊은-복사\" style=\"position:relative;\"><a href=\"#%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EC%99%80-%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC\" aria-label=\"얕은 복사와 깊은 복사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>얕은 복사와 깊은 복사</h3>\n<p>얕은 복사 - 바로 아래 단계의 값만 복사하는 방법\n깊은 복사 - 내부의 모든 값들을 하나하나 찾아서 전부 복사하는 방법</p>\n<p>얕은 복사를 할 경우 참조형 데이터가 저장된 프로퍼티를 복사할 때 그 주솟값만 복사한다는 의미입니다. 이렇게 되면 원본과 사본 모두 동일한 참조형 데이터의 주소를 가리키게 되며 사본이 바뀌면 원본도 바뀌게 됩니다.</p>\n<p>깊은 복사를 할 경우 내부의 모든 값을 복사해서 완전히 새로운 데이터를 만들고자 할 때, 객체의 프로퍼티 중에서 그 값이 기본형 데이터일 경우에는 그대로 복사하면 되지만 참조형 데이터는 다시 그 내부의 프로퍼티들을 복사해야 합니다.</p>\n<h3 id=\"undefined\" style=\"position:relative;\"><a href=\"#undefined\" aria-label=\"undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>undefined</h3>\n<p>undefined는 사용자가 명시적으로 지정할 수도 있지만 값이 존재하지 않을 때 자바스크립트 엔진이 자동으로 부여하는 경우도 있습니다. 자바스크립트 엔진은 사용자가 응당 어떤 값을 지정할 것이라고 예상되는 상황임에도 실제로는 그렇게 하지 않았을 때 undefined를 반환합니다.</p>\n<ul>\n<li>값을 대입하지 않은 변수, 즉 데이터 영역의 메모리 주소를 지정하지 않은 식별자에 접근할 때</li>\n<li>객체 내부의 존재하지 않는 프로퍼티에 접근하려고 할 때</li>\n<li>return 문이 없거나 호출되지 않는 함수의 실행 결과</li>\n</ul>","frontmatter":{"date":"November 05, 2022","title":"[Core-Javascript] 첫번째 팁 모음","categories":"BOOKS","author":"hoonloper","emoji":"📖"},"fields":{"slug":"/books/core-javascript-1/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://hoonloper.com","comments":{"utterances":{"repo":"hoonloper/hoonloper.github.io"}}}}},"pageContext":{"slug":"/algorithm/coding-test-1/","nextSlug":"/books/core-javascript-1/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}