{"componentChunkName":"component---src-templates-blog-template-js","path":"/modern-agile-team/tech5Mysql/","result":{"data":{"cur":{"id":"ec90152f-afc8-5098-8cbf-34128318974c","html":"<iframe width=\"720\" height=\"420\" src=\"https://www.youtube.com/embed/mSxqiMPRPMQ\" title=\"테크톡🎤 MySQL - 정용훈(3기)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h4 id=\"이번-포스팅은-back-end-개발자라면-꼭-알아야-하는-dbms-중-하나인-mysql에-대해-아주-간략하게-알아보겠습니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88-%ED%8F%AC%EC%8A%A4%ED%8C%85%EC%9D%80-back-end-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EA%BC%AD-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-dbms-%EC%A4%91-%ED%95%98%EB%82%98%EC%9D%B8-mysql%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%84%EC%A3%BC-%EA%B0%84%EB%9E%B5%ED%95%98%EA%B2%8C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"이번 포스팅은 back end 개발자라면 꼭 알아야 하는 dbms 중 하나인 mysql에 대해 아주 간략하게 알아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번 포스팅은 Back-End 개발자라면 꼭 알아야 하는 DBMS 중 하나인 MySQL에 대해 아주 간략하게 알아보겠습니다.</h4>\n<h2 id=\"why\" style=\"position:relative;\"><a href=\"#why\" aria-label=\"why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHY?</h2>\n<p>우리는 왜 MySQL과 같은 DB를 배워야 할까요?</p>\n<p>정답은 간단합니다. 이 세상에 존재하는 모든 정보와 파일 및 자료들을 관리해야 하기 때문입니다.</p>\n<p>예를들어 모든 정보와 자료를 종이 문서로 보관한다면 어떤 일이 발생할까요? 아마 지구 전체가 종이로 덮일만큼 엄청나게 많은 종이 문서들이 생겨나겠죠.</p>\n<p>즉, 모든 데이터 정보 및 자료들의 편리한 유지보수와 접근성을 위해 개발된 게 바로 데이터베이스(DB)의 개념이고 이 DB를 잘 다룰 수 있도록 개발된 데이터베이스 관리 시스템(DBMS) 중 하나인 MySQL이 있습니다!</p>\n<p>이제 MySQL이 뭔지, 어떻게 사용해야 하는지 알아봅시다!</p>\n<h2 id=\"mysql이란\" style=\"position:relative;\"><a href=\"#mysql%EC%9D%B4%EB%9E%80\" aria-label=\"mysql이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL이란?</h2>\n<p>MySQL은 현재 세계에서 가장 많이 사용되는 DB 1위, 2위를 다투고 있는 1995년에 발표된 오픈 소스 관계형 데이터 베이스 관리 시스템 입니다.</p>\n<blockquote>\n<p>💡 오픈소스란? 누구든지 소스 코드를 보고 접근할 수 있으며, 라이센스 비용이 없기 때문에 상업용 DB에 비해 TCO가 낮습니다. 소스코드를 다운로드 하고 수정하여 비용 없이, 그리고 벤더 종속 없이 애플리케이션을 구동할 수 있지만 오픈소스 DB의 구축을 유지하고 보호하기 위한 책임은 사용자에게 있습니다.</p>\n</blockquote>\n<blockquote>\n<p>💡 관리형 데이터 베이스 관리 시스템(RDBMS)란?<br>\n기존의 데이터 저장 접근법으로 키-값 짝을 사용해 열과 행으로 이루어진 표의 형태로 정형 데이터를 저장하는 방식입니다.</p>\n<p>NoSQL(비관계형) DB 문서 데이터 스토어, 열-중심 데이터베이스, 키-값 스토리지 및 그래프 DB 등 대안적인 데이터 스토리지 아키텍처를 사용한 데이터 저장의 방식입니다. 비관계형 DB는 비정형 데이터를 다루는 데 적합합니다.</p>\n</blockquote>\n<p>제작사는 MySQL AB 회사인데 썬 마이크로 시스템즈에게 10억 달러에 인수되었고, 이후 2010년 오라클이 썬 마이크로 시스템즈를 72억달러에 인수하면서 같이 넘어가게 됩니다.</p>\n<p>이에 따라, MySQL의 실질적인 소유주는 오라클인데 현재 오라클은 자체 상용 DBMS인 오라클 데이터베이스를 소유하고 있고, 오픈 소스에 대해 호의적이지 않은데다 프로그램이 갈수록 복잡해지고 있어서 MySQL 사용자들 사이에서 불안감이 커지고 있습니다.</p>\n<p>그래서 MySQL을 모태로 MariaDB라는 DBMS를 제작했습니다.</p>\n<h2 id=\"mysql-점유율\" style=\"position:relative;\"><a href=\"#mysql-%EC%A0%90%EC%9C%A0%EC%9C%A8\" aria-label=\"mysql 점유율 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL 점유율</h2>\n<img width=\"999\" alt=\"111\" src=\"https://user-images.githubusercontent.com/78959175/186406854-2ff2a713-1e5b-4af0-a22f-6f264a04a042.png\">\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186407007-d5625c82-701a-4d6c-89be-9a272ab16e02.png\" alt=\"222\"></p>\n<p>위 사진과 같이 오라클, MS SQL, MySQL, PostgreSQL은 상위권을 유지하고 있습니다.</p>\n<p>오라클에 인수된 이후 MySQL에서 발을 빼는 기업들이 늘어났습니다. 구글과 오라클, 자바의 저작권 소송으로 저작권 분쟁 위협을 느낀 일부 기업들은 MySQL에서 빠지기 시작해서 MariaDB, PostgreSQL 등으로 넘어가고 있습니다. 하지만 오라클은 예상과 달리 MySQL에 대해서는 저작권 관련 분쟁을 일으키지 않아서 이런 불안감은 점차 사그라들었고, 2022년 기준 MySQL은 오라클 DB, MS SQL과 더불어 3대 DBMS라는 위상을 지키고 있습니다.</p>\n<h2 id=\"mysql의-장점\" style=\"position:relative;\"><a href=\"#mysql%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"mysql의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL의 장점</h2>\n<ol>\n<li>오픈 소스 라이센스를 따르기 때문에 무료로 사용 가능</li>\n<li>다양한 운영체제에서 사용할 수 있으며, 여러가지의 프로그래밍 언어를 지원</li>\n<li>크기가 큰 데이터 집합도 아주 빠르고 효과적으로 처리할 수 있음</li>\n<li>널리 알려진 표준 SQL 형식을 사용</li>\n<li>MySQL 응용 프로그램을 사용자의 용도에 맞게 수정할 수 있음</li>\n</ol>","excerpt":"이번 포스팅은 Back-End 개발자라면 꼭 알아야 하는 DBMS 중 하나인 MySQL에 대해 아주 간략하게 알아보겠습니다. WHY? 우리는 왜 MySQL과 같은 DB를 배워야 할까요? 정답은 간단합니다. 이 세상에 존재하는 모든 정보와 파일 및 자료들을 관리해야 하기 때문입니다. 예를들어 모든 정보와 자료를 종이 문서로 보관한다면 어떤 일이 발생할까요? 아마 지구 전체가 종이로 덮일만큼 엄청나게 많은 종이 문서들이 생겨나겠죠. 즉, 모든 데이터 정보 및 자료들의 편리한 유지보수와 접근성을 위해 개발된 게 바로 데이터베이스(DB)의 개념이고 이 DB를 잘 다룰 수 있도록 개발된 데이터베이스 관리 시스템(DBMS) 중 하나인 MySQL이 있습니다! 이제 MySQL이 뭔지, 어떻게 사용해야 하는지 알아봅시다! MySQL이란? MySQL은 현재 세계에서 가장 많이 사용되는 DB 1위, 2위를 다투고 있는 1995년에 발표된 오픈 소스 관계형 데이터 베이스 관리 시스템 입니다. 💡 오픈소…","frontmatter":{"date":"February 24, 2022","title":"[Tech-Talk] MySQL","categories":"테크톡","author":"hoonloper","emoji":"🎙"},"fields":{"slug":"/modern-agile-team/tech5Mysql/"}},"next":{"id":"1281794c-71ae-5c38-9504-a711ba530521","html":"<p>comming soon…</p>","frontmatter":{"date":"February 15, 2022","title":"[프로젝트] 모애 타임 - 에브리 타임 클론 코딩","categories":"프로젝트","author":"hoonloper","emoji":"⏰"},"fields":{"slug":"/modern-agile-team/everytime/"}},"prev":{"id":"374265c2-f7bd-50b7-8ffe-b5ac85fb7367","html":"<iframe width=\"720\" height=\"420\" src=\"https://www.youtube.com/embed/li8IzbQwHCA\" title=\"테크톡🎤 Middleware - 정용훈(3기)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h3 id=\"꼭-알고-있어야-하는-것들중-하나인-미들웨어에-대해-알아보겠습니다-\" style=\"position:relative;\"><a href=\"#%EA%BC%AD-%EC%95%8C%EA%B3%A0-%EC%9E%88%EC%96%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%83%EB%93%A4%EC%A4%91-%ED%95%98%EB%82%98%EC%9D%B8-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4-\" aria-label=\"꼭 알고 있어야 하는 것들중 하나인 미들웨어에 대해 알아보겠습니다  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>꼭 알고 있어야 하는 것들중 하나인 미들웨어에 대해 알아보겠습니다 🤩</h3>\n<p>미들웨어 자체에 품고 있는 뜻이 너무나 방대하다 보니 웹 브라우저 기준 미들웨어에 대해 풀어보겠습니다 !</p>\n<p>우선적으로 미들웨어의 정의입니다.</p>\n<blockquote>\n<p>미들웨어는 양 쪽을 연결하여 데이터를 주고 받을 수 있도록 중간에서 매개 역할을 하는 소프트웨어, 네트워크를 통해서 연결된 여러 개의 컴퓨터에 있는 많은 프로세스들에게 어떤 서비스를 사용할 수 있도록 연결해 주는 소프트웨어를 말한다. 3계층 클라이언트/서버 구조에서 미들웨어가 존재한다. 웹 브라우저에서 데이터베이스로부터 데이터를 저장하거나 읽어올 수 있게 중간에 미들웨어가 존재하게 된다.</p>\n</blockquote>\n<p>글 내용에서 알 수 있다 싶이 핵심만 간단 요약하면 ‘양 쪽을 연결하여 중간에서 매개 역할을 함 즉, 웹 브라우저에서 데이터 베이스(DB)로부터 데이터를 저장하거나 읽어올 수 있다.’가 되겠네요.</p>\n<p>넓은 범위로는 매개체 간 연결해주는 레이어로써 매개체는 클라이언트(사용자) - 서버, 서버 - 서버 간의 통신이 될 수도 있습니다.</p>\n<h2 id=\"미들웨어가-탄생하게-된-배경-3-tier\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4%EA%B0%80-%ED%83%84%EC%83%9D%ED%95%98%EA%B2%8C-%EB%90%9C-%EB%B0%B0%EA%B2%BD-3-tier\" aria-label=\"미들웨어가 탄생하게 된 배경 3 tier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미들웨어가 탄생하게 된 배경 (3-Tier)</h2>\n<p>기존 웹 어플리케이션 운영 환경에서 사용자의 요청이 유입되는 순간부터 비즈니스 로직 처리, 데이터 처리 등을 모두 한 곳의 물리적 환경(서버)에서 통합 제공했습니다. 운영자 입장에서 하나의 서버만 운영하면 되니 관리 포인트가 1개라는 장점이 있습니다.</p>\n<p>👉 과연 1개의 관리 포인트는 장점만 있을까요?</p>\n<p>생각의 관점을 달리하면 1개의 통합 서버에 문제가 생겼을 때 전체 서비스 장애로 이어지고, 어느 포인트에서 장애를 일으켰는 지 분석이 쉽지 않습니다. 1-Tier어 구조일 때 말이죠.</p>\n<p>더 나아가 DBMS의 경우 분리된 환경에서 제공되니 서비스 안정성이 증가했을텐데 간과한 부분이 있습니다. 아직 ‘사용자의 요청이 유입되는 순간’, ‘비즈니스 로직 처리’ 만큼은 통합된 서비스에서 제공하기 때문입니다.</p>\n<blockquote>\n<p><a href=\"http://www.naver.com%EC%9D%84\">www.naver.com을</a> 입력하고 Enter를 치자마자 1.8초만에 231개의 요청이 발생했습니다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186407811-e3555c59-6c00-40f0-9d44-6a455a173e53.png\" alt=\"111\"></p>\n<p>이렇게 동시다발적인 사용자의 호출이 쌓인다면 통합된 서비스에서는 부하를 받을 것입니다. 따라서, 효율적인 서비스 처리를 위해 아래 기준대로 서비스를 나누게 되었습니다.</p>\n<ul>\n<li>사용자의 요청이 유입되는 순간 호출되는 앞단(Front-End)의 정적 페이지(html, css, js, png 등)를 전용으로 처리하는 서버</li>\n<li>로그인, 검색 등 데이터를 가공하고 처리하는 뒷단(Back-End)의 동적 페이지(jsp, servlet 등)를 전용으로 처리하는 서버</li>\n</ul>\n<blockquote>\n<p>💡 이렇게 3개의 관리 포인트로 쪼개진 것을 3-Tier 구조라고 하며, 위 두 개의 서버는 각각 WEB Server / WAS 를 의미합니다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186407824-d4b47bfc-0e27-4514-95cc-6cb86506f808.png\" alt=\"222\"></p>\n<p>이 사진은 여러분들에게 매우 익숙할 거예요. <del>제가 자주 애용했거든요 ㅎㅎ</del></p>\n<p>여기서 미들웨어는 Client와 Database 사이에 위치한 Web Server와 WAS를 관리합니다.</p>\n<p>미들웨어 장점으로</p>\n<ul>\n<li>표준화된 인터페이스 제공 가능합니다.</li>\n<li>다양한 환경 지원, 체계가 다른 업무와 상호 연동이 가능합니다.</li>\n<li>분산된 업무를 동시에 처리 가능하여 자료의 일관성이 유지됩니다.</li>\n<li>부하의 분산이 가능합니다.</li>\n</ul>\n<h2 id=\"미들웨어-종류\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%EC%A2%85%EB%A5%98\" aria-label=\"미들웨어 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미들웨어 종류</h2>\n<p><strong>1. 원격 프로시저 호출(Remote Procedure Call, 약칭 RPC):</strong> 클라이언트가 원격에서 동작하는 프로시저를 호출하는 시스템. 동기 또는 비동기를 지원합니다.</p>\n<p><strong>2. 메시지 지향 미들웨어(Message Oriented Middleware, 약칭 MOM):</strong> 클라이언트가 생성한 메시지는 저장소에 요청할 때 저장하면서, 다른 업무를 지속할 수 있도록 하는 비동기식 미들웨어입니다.</p>\n<p><strong>3. ORB(Object Request Broker):</strong> 객체지향 시스템에서 객체 및 서비스를 요청하고 전송할 수 있도록 지원하는 미들웨어입니다.</p>\n<p><strong>4. DB 접속 미들웨어:</strong> 애플리케이션과 데이터베이스 서버를 연결해주는 미들웨어입니다.</p>\n<p>또다른 분류법</p>\n<p><strong>1. TP모니터(Transaction Processing(TP) monitor):</strong> 분산 시스템의 애플리케이션을 지원하는 미들웨어. 주로 C/S 시스템에 사용됩니다.</p>\n<p><strong>2. 웹 애플리케이션 서버(Web Application Server):</strong> 웹 애플리케이션을 지원하는 미들웨어입니다.</p>\n<p><strong>3. 엔터프라이즈 서비스 버스(Enterprise Service Bus):</strong> 메시지 기반으로 느슨한 결합형태의 표준 인터페이스 통신을 지원하는 미들웨어로 기업 안팎에 있는 모든 시스템 환경을 연동하는 미들웨어입니다.</p>\n<p><strong>TP모니터란?</strong></p>\n<p>각종 프로토콜에서 동작하는 세션과 시스템과 데이터베이스 사이의 최소 처리단위인 트랜잭션을 감시하여 일관성있게 보관 유지하는 역할을 하는 트랜잭션 관리 미들웨어입니다.</p>\n<h2 id=\"front-end-back-end-미들웨어\" style=\"position:relative;\"><a href=\"#front-end-back-end-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\" aria-label=\"front end back end 미들웨어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Front-End, Back-End 미들웨어</h2>\n<h3 id=\"front-end\" style=\"position:relative;\"><a href=\"#front-end\" aria-label=\"front end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Front-End</h3>\n<p>모던애자일 3기 프로젝트 기술 스택 중 하나인 리덕스에서 미들웨어가 어떻게 사용되는지 간략하게 작성해 볼게요</p>\n<p><del>(~저는 Back-End 팀이라 Front-End는 자세히 모르..</del>)~</p>\n<p>미들웨어는 액션(action)과 리듀서(reducer) 함수 사이의 중간자 라고 합니다. 미들웨어를 통해 전달받은 액션을 콘솔에 기록하거나 취소 혹은 다른 종류의 액션을 추가적으로 디스패치(dispatch)할 수 있습니다.</p>\n<p>리덕스에서 미들웨어는 액션을 디스패치했을 때 리듀서에서 이를 처리하기에 앞서 사전에 지정된 작업들을 실행합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186407830-f3872ea3-4d54-4307-8de3-dbda3f0a34c4.png\" alt=\"333\"></p>\n<p><strong>리덕스 미들웨어의 구조</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 미들웨어 기본 구조\nconst loggerMiddleware = store => next => action => {\n    // 하고자 하는 작업\n};</code></pre></div>\n<p>위 코드의 화살표 함수를 풀어서 쓴다면 다음과 같은 구조입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const loggerMiddleware = function loggerMiddleware(store){\n    return function(next) {\n    return function(action){\n         // 미들웨어 기본 구조\n\n        };\n    };\n};</code></pre></div>\n<p>미들웨어는 결국 함수를 반환하고 함수를 반환하는 하나의 함수입니다.</p>\n<h3 id=\"여기에-있는-함수의-파라미더들은-어떤-역할을-하는가\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EA%B8%B0%EC%97%90-%EC%9E%88%EB%8A%94-%ED%95%A8%EC%88%98%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%EB%8D%94%EB%93%A4%EC%9D%80-%EC%96%B4%EB%96%A4-%EC%97%AD%ED%95%A0%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"여기에 있는 함수의 파라미더들은 어떤 역할을 하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>여기에 있는 함수의 파라미더들은 어떤 역할을 하는가?</strong></h3>\n<p><strong>store</strong></p>\n<p>리덕스 스토어 인스턴스이며 애플리케이션의 전역 상태이고, dispatch, getState, subscribe 등 내장 함수들이 존재합니다.</p>\n<p><strong>next</strong></p>\n<p>액션을 다음 <strong>미들웨어에게 전달하는 함수</strong>이며, <strong>next(action) 형태로 사용합니</strong>다.</p>\n<p>next(action)을 호출하면 그다음 처리해야 할 미들웨어에게 액션을 넘겨주고, 만약 그다음 미들웨어가 없다면 리듀서에게 액션을 넘겨주는 형태입니다.</p>\n<p><strong>action</strong></p>\n<p>action은 현재 처리하고 있는 액션 객체를 의미합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186407832-64209eee-b59c-4c29-9eef-ca44972f0e99.png\" alt=\"444\"></p>\n<p>미들웨어를 직접 만들어서 사용해도 되지만, 오픈 소스 커뮤니티에 올라와 있는 redux-logger를 사용하는 것이 훨씬 좋습니다.</p>\n<p>브라우저 콘솔에 나타나는 형식이 깔끔하며 잘 만들어진 라이브러리입니다.</p>\n<p><a href=\"https://www.npmjs.com/package/redux-logger\">redux-logger</a></p>\n<p>[redux-logger</p>\n<p>Logger for Redux. Latest version: 3.0.6, last published: 5 years ago. Start using redux-logger in your project by running `npm i redux-logger`. There are 2428 other projects in the npm registry using redux-logger.</p>\n<p><a href=\"http://www.npmjs.com%5D(https://www.npmjs.com/package/redux-logger)\">www.npmjs.com](https://www.npmjs.com/package/redux-logger)</a></p>\n<h3 id=\"back-end\" style=\"position:relative;\"><a href=\"#back-end\" aria-label=\"back end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Back-End</h3>\n<p>웹 개발에서 일반적으로 미들웨어라 함은 라우트 핸들러가 클라이언트의 요청을 처리하기 전에 수행되는 컴포넌트를 말합니다.</p>\n<blockquote>\n<p>💡 라우트 핸들러는 웹프레임워크에서 사용자의 요청을 처리하는 엔드포인트(쉽게 이야기해서 URL)마다 동작을 수행하는 컴포넌트를 말합니다.</p>\n<p>라우트 핸들러가 요청 경로와 컨트롤러를 매핑해 준다고 이해하면 됩니다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/78959175/186407835-b3226d27-d95f-4503-ac33-43609d11d593.png\" alt=\"555\"></p>\n<p>Nest의 미들웨어는 기본적으로 Express의 미들웨어와 동일합니다. Express 문서에는 미들웨어가 다음과 같은 동작을 수행할 수 있다고 기술되어 있습니다.</p>\n<ul>\n<li>어떤 형태의 코드라도 수행할 수 있습니다.</li>\n<li>요청과 응답에 변형을 가할 수 있습니다.</li>\n<li>요청-응답 주기를 끝낼 수 있습니다.</li>\n<li>여러 개의 미들웨어를 사용한다면 next()로 호출 스택상 다음 미들웨어에게 제어권을 전달합니다.</li>\n</ul>\n<p>요청-응답 주기를 끝낸다는 것은 응답을 보내거나 에러처리를 해야 한다는 뜻입니다. 만약 현재 미들웨어가 응답 주기를 끝내지 않을 것이라면 반드시 next()를 호출해야 합니다. 그렇지 않으면 어플리케이션은 더이상 아무것도 할 수 없는 상태(hanging이라고 표현합니다)가 됩니다.</p>\n<p>nest에서 미들웨어를 활용하여 다음과 같은 작업들을 수행할 수 있습니다.</p>\n<ul>\n<li>쿠키 파싱: 쿠키를 파싱하여 사용하기 쉬운 데이터 구조로 변경합니다. 이를 이용하면 라우터 핸들러가 매번 쿠키를 파싱할 필요가 없습니다.</li>\n<li>세션 관리: 세션 쿠키를 찾고, 해당 쿠키에 대한 세션의 상태를 조회해서 요청에 세션 정보를 추가합니다. 이를 통해 다른 핸들러가 세션 객체를 이용할 수 있도록 해 줍니다.</li>\n<li>인증/인가: 사용자가 서비스에 접근 가능한 권한이 있는지 확인합니다. 단, Nest는 인가를 구현할 때 가드(Guard)를 이용하도록 권장하고 있습니다.</li>\n<li>본문(body) 파싱: 본문은 POST/PUT 요청으로 들어오는 json 타입뿐 아니라 파일 스트림과 같은 데이터도 있습니다. 이 데이터를 유형에 따라 읽고 해석한 다음 파라미터에 넣는 작업을 합니다. 앞서 컨트롤러 장에서 보았던 본문은 이렇게 분석된 결과가 포함되어 있습니다.</li>\n</ul>\n<p>그 외 원하는 기능이 있다면 직접 구현도 가능합니다. 커스텀 미들웨어를 잘 만들면 도메인에 관심사를 집중하여 어플리케이션을 작성할 수 있습니다.</p>\n<h3 id=\"logger-미들웨어\" style=\"position:relative;\"><a href=\"#logger-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\" aria-label=\"logger 미들웨어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logger 미들웨어</h3>\n<p>미들웨어는 함수로 작성하거나 NestMiddleware 인터페이스를 구현한 클래스로 작성할 수 있습니다. 들어온 요청에 포함된 정보를 로깅하기 위한 Logger를 미들웨어로 구현해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log('Request...');\n    next();\n  }\n}</code></pre></div>\n<p>미들웨어를 모듈에 포함시키기 위해서는 해당 모듈은 NestModule 인터페이스를 구현해야 합니다. NestModule에 선언된 configure함수를 통해 미들웨어를 설정합니다.</p>\n<ul>\n<li>logger.middleware.ts</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { LoggerMiddleware } from './logger/logger.middleware';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [UsersModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes('/users');\n  }\n}</code></pre></div>\n<p>/users 경로로 들어오는 요청을 수행해 보면 콘솔에 <code class=\"language-text\">Request...</code> 이 찍히는 걸 확인할 수 있습니다.</p>\n<h3 id=\"이렇게-미들웨어가-무엇인지와-front-end-back-end에서-어떻게-사용되는지-알아봤습니다-감사합니다-\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80%EC%99%80-front-end-back-end%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94%EC%A7%80-%EC%95%8C%EC%95%84%EB%B4%A4%EC%8A%B5%EB%8B%88%EB%8B%A4-%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-\" aria-label=\"이렇게 미들웨어가 무엇인지와 front end back end에서 어떻게 사용되는지 알아봤습니다 감사합니다  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>이렇게 미들웨어가 무엇인지와 Front-End, Back-End에서 어떻게 사용되는지 알아봤습니다. 감사합니다 😘</strong></h3>","frontmatter":{"date":"March 11, 2022","title":"[Tech-Talk] Middleware","categories":"테크톡","author":"hoonloper","emoji":"🎙"},"fields":{"slug":"/modern-agile-team/tech6middleware/"}},"site":{"siteMetadata":{"siteUrl":"https://hoonloper.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/modern-agile-team/tech5Mysql/","nextSlug":"/modern-agile-team/everytime/","prevSlug":"/modern-agile-team/tech6middleware/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}